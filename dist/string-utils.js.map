{"version":3,"sources":["../node_modules/@nyxlang/helpers/src/array.js","../node_modules/@nyxlang/helpers/src/boolean.js","../node_modules/@nyxlang/helpers/src/nil.js","../node_modules/@nyxlang/helpers/src/number.js","../node_modules/@nyxlang/helpers/src/regexp.js","../node_modules/@nyxlang/helpers/src/string.js","../node_modules/@nyxlang/helpers/src/symbol.js","../node_modules/@nyxlang/helpers/src/value.js","../node_modules/@nyxlang/helpers/index.js","case/capitalize.js","../node_modules/unicode-default-word-boundary/lib/gen/WordBreakProperty.js","../node_modules/unicode-default-word-boundary/lib/findBoundaries.js","../node_modules/unicode-default-word-boundary/lib/index.js","helpers/regexp.js","split/words.js","strip/strippunc.js","case/camelcase.js","case/decapitalize.js","case/downcase.js","case/kebabcase.js","case/pascalcase.js","case/snakecase.js","encode/decodecodepoints.js","encode/decodeutf8.js","encode/decodeutf16.js","encode/encodecodepoints.js","encode/encodeutf8.js","encode/encodeutf16.js","join/join.js","query/isstring.js","lib/grapheme_iterator.js","split/graphemes.js","split/scalars.js","functions.js","index.js"],"names":["coerceToString","helpers","capitalize","subject","lower","all","locale","str","toLocaleUpperCase","slice","toLocaleLowerCase","ws","split","reduce","s","w","i","a","st","length","digit","whitespace","diacriticalMark","nonCharacter","dingbatBlock","lowerCaseLetter","upperCaseLetter","asciiPunctuation","latin1SupplementPunctuation","generalPunctuationBlock","supplementalPunctuationBlock","TRIM_CHARS","REGEXP_PUNCTUATION","RegExp","IS_PUNCTUATION","REGEXP_EXTENDED_ASCII","REGEXP_LATIN_WORD","REGEXP_WORD","words","isNil","isRegExp","nilDefault","pattern","flags","sansUnderscores","regexp","replace","filter","word","test","map","match","acc","Array","isArray","forEach","push","flagString","stripPunc","camelCase","splitWords","decapitalize","downcase","kebabCase","pascalCase","snakeCase","upper","decodeCodePoints","data","point","String","fromCodePoint","decodeUTF8","value","fromCharCode","charCode","decodeUTF16","codes","code","encodeCodePoints","scalar","codePointAt","encodeUTF8","utf8","charcode","charCodeAt","charCodes","char","join","strings","sep","isString","grapheme_iterator","GraphemeBreakProperty","JSON","parse","lut","Uint8Array","p","bs","b","c","classify","v","Any","Prepend","CR","LF","Control","Extend","Regional","SpacingMark","L","V","T","LV","LVT","ZWJ","Symbol","iterator","pp","egc","regionalstack","cp","cs","cc","graphemes","scalars","encodeUTF16"],"mappings":"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","file":"string-utils.js","sourceRoot":"../src","sourcesContent":["function isArray(obj) {\n  return Array.isArray(obj);\n}\n\nfunction isArrayLike(obj) {\n  return (\n    isArray(obj) ||\n    (!!obj &&\n      typeof obj == \"object\" &&\n      typeof obj.length == \"number\" &&\n      obj.length === 0) ||\n    (obj.length > 0 && obj.length - 1 in obj)\n  );\n}\n\nmodule.exports = { isArray, isArrayLike };\n","function isBoolean(obj) {\n  return (\n    typeof obj == \"boolean\" ||\n    (typeof obj == \"object\" && obj instanceof Boolean)\n  );\n}\n\nmodule.exports = { isBoolean };\n","/**\n * Checks if `value` is null or undefined. From {@link https://github.com/panzerdp/voca/blob/master/src/helper/object/is_nil.js}\n *\n * @function isNil\n * @ignore\n * @param {*} value\n * @returns {boolean} `true` if value is `null` or `undefined`, else `false`\n */\nfunction isNil(value) {\n  return value == null;\n}\n\n/**\n * Returns a default if the supplied value is null or undefined\n *\n * @param {*} value The value to check\n * @param {*} defaultValue The value to return if value is nil\n * @returns {*}\n * @ignore\n */\nfunction nilDefault(value, defaultValue) {\n  return value == null ? defaultValue : value;\n}\n\nfunction isNull(value) {\n  return value === null;\n}\n\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = { isNil, isNull, isUndefined, nilDefault };\n","function isNumber(obj) {\n  return (\n    typeof obj == \"number\" || (typeof obj == \"object\" && obj instanceof Number)\n  );\n}\n\nfunction isBigInt(obj) {\n  return typeof obj == \"bigint\";\n}\n\nfunction handleNegativeIndex(index, seq) {\n  if (index < 0) {\n    index = seq.length + index;\n  }\n  return index;\n}\n\nfunction valueOf(number) {\n  // cast to number to handle BigInts\n  return Number(number.valueOf());\n}\n\nmodule.exports = { handleNegativeIndex, isBigInt, isNumber, valueOf };\n","/**\n * A function to determine if an object is a RegExp\n * @ignore\n */\nfunction isRegExp(obj) {\n  return obj instanceof RegExp;\n}\n\nmodule.exports = { isRegExp };\n","const { isNil } = require(\"./nil\");\n\n/**\n * Coerce a value to its string representation. From {@link https://github.com/panzerdp/voca/blob/master/src/helper/string/coerce_to_string.js}\n *\n * @ignore\n * @function coerceToString\n * @param {*} value To coerce to a string\n * @returns {string}\n */\nfunction coerceToString(value) {\n  if (isNil(value)) {\n    return \"\";\n  }\n  if (isString(value)) {\n    return value;\n  }\n  return String(value);\n}\n\nfunction isString(value) {\n  return (\n    typeof value == \"string\" ||\n    (typeof value == \"object\" && value instanceof String)\n  );\n}\n\nmodule.exports = { coerceToString, isString };\n","function isSymbol(obj) {\n  return typeof obj == \"symbol\";\n}\n\nmodule.exports = { isSymbol };\n","function isDefined(parameter) {\n  return parameter !== undefined;\n}\n\nmodule.exports = { isDefined };\n","const array = require(\"./src/array\");\nconst boolean = require(\"./src/boolean\");\nconst nil = require(\"./src/nil\");\nconst number = require(\"./src/number\");\nconst regexp = require(\"./src/regexp\");\nconst string = require(\"./src/string\");\nconst symbol = require(\"./src/symbol\");\nconst value = require(\"./src/value\");\n\nmodule.exports = {\n  ...array,\n  ...boolean,\n  ...nil,\n  ...number,\n  ...regexp,\n  ...string,\n  ...symbol,\n  ...value,\n};\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n\n/**\n * Capitalizes the first letter of a string. If lower is true, downcases the rest\n * of the string. If all is true, all words in the string will be capitalized.\n * Use the locale parameter to set the locale for casing the string.\n *\n * @function capitalize\n * @static\n * @since 0.0.1\n * @memberof Case\n * @param {string} subject String to capitalize\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.lower=false] Downcase the rest of the string if true\n * @param {boolean} [options.all=false] Capitalize every word in the string if true\n * @param {(string|string[])} [options.locale=en-US] The locale or locales to use\n * @returns {string}\n * @throws {RangeError} if locale is not a valid language tag\n * @throws {TypeError} if an array element in the locale param is not a string\n * @example\n * su.capitalize(\"thIs Is a String to CAPITALIZE\")\n * // => \"ThIs Is a String to CAPITALIZE\"\n * su.capitalize(\"thIs Is a String to CAPITALIZE\", { lower: true })\n * // => \"This is a string to capitalize\"\n * su.capitalize(\"thIs Is a String to CAPITALIZE\", { lower: true, all: true })\n * // => \"This Is A String To Capitalize\"\n * su.capitalize(\"istanbul\", { locale: \"TR\" })\n * // => İstanbul\n */\nexport default function capitalize(\n  subject,\n  { lower = false, all = false, locale = \"en-US\" } = {}\n) {\n  subject = coerceToString(subject);\n  let str = subject[0].toLocaleUpperCase(locale) + subject.slice(1);\n  if (lower) {\n    str = str[0] + str.slice(1).toLocaleLowerCase(locale);\n  }\n  if (all) {\n    const ws = str.split(\" \");\n    str = ws.reduce((s, w, i, a) => {\n      let st = w[0].toLocaleUpperCase(locale) + w.slice(1);\n      if (i < a.length - 1) {\n        st += \" \";\n      }\n      return s + st;\n    }, \"\");\n  }\n  return str;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n;\nexports.extendedPictographic = /^[\\u00A9\\u00AE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9-\\u21AA\\u231A-\\u231B\\u2328\\u2388\\u23CF\\u23E9-\\u23EC\\u23ED-\\u23EE\\u23EF\\u23F0\\u23F1-\\u23F2\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA-\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2601\\u2602-\\u2603\\u2604\\u2605\\u2607-\\u260D\\u260E\\u260F-\\u2610\\u2611\\u2612\\u2614-\\u2615\\u2616-\\u2617\\u2618\\u2619-\\u261C\\u261D\\u261E-\\u261F\\u2620\\u2621\\u2622-\\u2623\\u2624-\\u2625\\u2626\\u2627-\\u2629\\u262A\\u262B-\\u262D\\u262E\\u262F\\u2630-\\u2637\\u2638-\\u2639\\u263A\\u263B-\\u263F\\u2640\\u2641\\u2642\\u2643-\\u2647\\u2648-\\u2653\\u2654-\\u265E\\u265F\\u2660\\u2661-\\u2662\\u2663\\u2664\\u2665-\\u2666\\u2667\\u2668\\u2669-\\u267A\\u267B\\u267C-\\u267D\\u267E\\u267F\\u2680-\\u2685\\u2690-\\u2691\\u2692\\u2693\\u2694\\u2695\\u2696-\\u2697\\u2698\\u2699\\u269A\\u269B-\\u269C\\u269D-\\u269F\\u26A0-\\u26A1\\u26A2-\\u26A6\\u26A7\\u26A8-\\u26A9\\u26AA-\\u26AB\\u26AC-\\u26AF\\u26B0-\\u26B1\\u26B2-\\u26BC\\u26BD-\\u26BE\\u26BF-\\u26C3\\u26C4-\\u26C5\\u26C6-\\u26C7\\u26C8\\u26C9-\\u26CD\\u26CE\\u26CF\\u26D0\\u26D1\\u26D2\\u26D3\\u26D4\\u26D5-\\u26E8\\u26E9\\u26EA\\u26EB-\\u26EF\\u26F0-\\u26F1\\u26F2-\\u26F3\\u26F4\\u26F5\\u26F6\\u26F7-\\u26F9\\u26FA\\u26FB-\\u26FC\\u26FD\\u26FE-\\u2701\\u2702\\u2703-\\u2704\\u2705\\u2708-\\u270C\\u270D\\u270E\\u270F\\u2710-\\u2711\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733-\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2765-\\u2767\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934-\\u2935\\u2B05-\\u2B07\\u2B1B-\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299\\u{01F000}-\\u{01F003}\\u{01F004}\\u{01F005}-\\u{01F0CE}\\u{01F0CF}\\u{01F0D0}-\\u{01F0FF}\\u{01F10D}-\\u{01F10F}\\u{01F12F}\\u{01F16C}-\\u{01F16F}\\u{01F170}-\\u{01F171}\\u{01F17E}-\\u{01F17F}\\u{01F18E}\\u{01F191}-\\u{01F19A}\\u{01F1AD}-\\u{01F1E5}\\u{01F201}-\\u{01F202}\\u{01F203}-\\u{01F20F}\\u{01F21A}\\u{01F22F}\\u{01F232}-\\u{01F23A}\\u{01F23C}-\\u{01F23F}\\u{01F249}-\\u{01F24F}\\u{01F250}-\\u{01F251}\\u{01F252}-\\u{01F2FF}\\u{01F300}-\\u{01F30C}\\u{01F30D}-\\u{01F30E}\\u{01F30F}\\u{01F310}\\u{01F311}\\u{01F312}\\u{01F313}-\\u{01F315}\\u{01F316}-\\u{01F318}\\u{01F319}\\u{01F31A}\\u{01F31B}\\u{01F31C}\\u{01F31D}-\\u{01F31E}\\u{01F31F}-\\u{01F320}\\u{01F321}\\u{01F322}-\\u{01F323}\\u{01F324}-\\u{01F32C}\\u{01F32D}-\\u{01F32F}\\u{01F330}-\\u{01F331}\\u{01F332}-\\u{01F333}\\u{01F334}-\\u{01F335}\\u{01F336}\\u{01F337}-\\u{01F34A}\\u{01F34B}\\u{01F34C}-\\u{01F34F}\\u{01F350}\\u{01F351}-\\u{01F37B}\\u{01F37C}\\u{01F37D}\\u{01F37E}-\\u{01F37F}\\u{01F380}-\\u{01F393}\\u{01F394}-\\u{01F395}\\u{01F396}-\\u{01F397}\\u{01F398}\\u{01F399}-\\u{01F39B}\\u{01F39C}-\\u{01F39D}\\u{01F39E}-\\u{01F39F}\\u{01F3A0}-\\u{01F3C4}\\u{01F3C5}\\u{01F3C6}\\u{01F3C7}\\u{01F3C8}\\u{01F3C9}\\u{01F3CA}\\u{01F3CB}-\\u{01F3CE}\\u{01F3CF}-\\u{01F3D3}\\u{01F3D4}-\\u{01F3DF}\\u{01F3E0}-\\u{01F3E3}\\u{01F3E4}\\u{01F3E5}-\\u{01F3F0}\\u{01F3F1}-\\u{01F3F2}\\u{01F3F3}\\u{01F3F4}\\u{01F3F5}\\u{01F3F6}\\u{01F3F7}\\u{01F3F8}-\\u{01F3FA}\\u{01F400}-\\u{01F407}\\u{01F408}\\u{01F409}-\\u{01F40B}\\u{01F40C}-\\u{01F40E}\\u{01F40F}-\\u{01F410}\\u{01F411}-\\u{01F412}\\u{01F413}\\u{01F414}\\u{01F415}\\u{01F416}\\u{01F417}-\\u{01F429}\\u{01F42A}\\u{01F42B}-\\u{01F43E}\\u{01F43F}\\u{01F440}\\u{01F441}\\u{01F442}-\\u{01F464}\\u{01F465}\\u{01F466}-\\u{01F46B}\\u{01F46C}-\\u{01F46D}\\u{01F46E}-\\u{01F4AC}\\u{01F4AD}\\u{01F4AE}-\\u{01F4B5}\\u{01F4B6}-\\u{01F4B7}\\u{01F4B8}-\\u{01F4EB}\\u{01F4EC}-\\u{01F4ED}\\u{01F4EE}\\u{01F4EF}\\u{01F4F0}-\\u{01F4F4}\\u{01F4F5}\\u{01F4F6}-\\u{01F4F7}\\u{01F4F8}\\u{01F4F9}-\\u{01F4FC}\\u{01F4FD}\\u{01F4FE}\\u{01F4FF}-\\u{01F502}\\u{01F503}\\u{01F504}-\\u{01F507}\\u{01F508}\\u{01F509}\\u{01F50A}-\\u{01F514}\\u{01F515}\\u{01F516}-\\u{01F52B}\\u{01F52C}-\\u{01F52D}\\u{01F52E}-\\u{01F53D}\\u{01F546}-\\u{01F548}\\u{01F549}-\\u{01F54A}\\u{01F54B}-\\u{01F54E}\\u{01F54F}\\u{01F550}-\\u{01F55B}\\u{01F55C}-\\u{01F567}\\u{01F568}-\\u{01F56E}\\u{01F56F}-\\u{01F570}\\u{01F571}-\\u{01F572}\\u{01F573}-\\u{01F579}\\u{01F57A}\\u{01F57B}-\\u{01F586}\\u{01F587}\\u{01F588}-\\u{01F589}\\u{01F58A}-\\u{01F58D}\\u{01F58E}-\\u{01F58F}\\u{01F590}\\u{01F591}-\\u{01F594}\\u{01F595}-\\u{01F596}\\u{01F597}-\\u{01F5A3}\\u{01F5A4}\\u{01F5A5}\\u{01F5A6}-\\u{01F5A7}\\u{01F5A8}\\u{01F5A9}-\\u{01F5B0}\\u{01F5B1}-\\u{01F5B2}\\u{01F5B3}-\\u{01F5BB}\\u{01F5BC}\\u{01F5BD}-\\u{01F5C1}\\u{01F5C2}-\\u{01F5C4}\\u{01F5C5}-\\u{01F5D0}\\u{01F5D1}-\\u{01F5D3}\\u{01F5D4}-\\u{01F5DB}\\u{01F5DC}-\\u{01F5DE}\\u{01F5DF}-\\u{01F5E0}\\u{01F5E1}\\u{01F5E2}\\u{01F5E3}\\u{01F5E4}-\\u{01F5E7}\\u{01F5E8}\\u{01F5E9}-\\u{01F5EE}\\u{01F5EF}\\u{01F5F0}-\\u{01F5F2}\\u{01F5F3}\\u{01F5F4}-\\u{01F5F9}\\u{01F5FA}\\u{01F5FB}-\\u{01F5FF}\\u{01F600}\\u{01F601}-\\u{01F606}\\u{01F607}-\\u{01F608}\\u{01F609}-\\u{01F60D}\\u{01F60E}\\u{01F60F}\\u{01F610}\\u{01F611}\\u{01F612}-\\u{01F614}\\u{01F615}\\u{01F616}\\u{01F617}\\u{01F618}\\u{01F619}\\u{01F61A}\\u{01F61B}\\u{01F61C}-\\u{01F61E}\\u{01F61F}\\u{01F620}-\\u{01F625}\\u{01F626}-\\u{01F627}\\u{01F628}-\\u{01F62B}\\u{01F62C}\\u{01F62D}\\u{01F62E}-\\u{01F62F}\\u{01F630}-\\u{01F633}\\u{01F634}\\u{01F635}\\u{01F636}\\u{01F637}-\\u{01F640}\\u{01F641}-\\u{01F644}\\u{01F645}-\\u{01F64F}\\u{01F680}\\u{01F681}-\\u{01F682}\\u{01F683}-\\u{01F685}\\u{01F686}\\u{01F687}\\u{01F688}\\u{01F689}\\u{01F68A}-\\u{01F68B}\\u{01F68C}\\u{01F68D}\\u{01F68E}\\u{01F68F}\\u{01F690}\\u{01F691}-\\u{01F693}\\u{01F694}\\u{01F695}\\u{01F696}\\u{01F697}\\u{01F698}\\u{01F699}-\\u{01F69A}\\u{01F69B}-\\u{01F6A1}\\u{01F6A2}\\u{01F6A3}\\u{01F6A4}-\\u{01F6A5}\\u{01F6A6}\\u{01F6A7}-\\u{01F6AD}\\u{01F6AE}-\\u{01F6B1}\\u{01F6B2}\\u{01F6B3}-\\u{01F6B5}\\u{01F6B6}\\u{01F6B7}-\\u{01F6B8}\\u{01F6B9}-\\u{01F6BE}\\u{01F6BF}\\u{01F6C0}\\u{01F6C1}-\\u{01F6C5}\\u{01F6C6}-\\u{01F6CA}\\u{01F6CB}\\u{01F6CC}\\u{01F6CD}-\\u{01F6CF}\\u{01F6D0}\\u{01F6D1}-\\u{01F6D2}\\u{01F6D3}-\\u{01F6D4}\\u{01F6D5}\\u{01F6D6}-\\u{01F6D7}\\u{01F6D8}-\\u{01F6DF}\\u{01F6E0}-\\u{01F6E5}\\u{01F6E6}-\\u{01F6E8}\\u{01F6E9}\\u{01F6EA}\\u{01F6EB}-\\u{01F6EC}\\u{01F6ED}-\\u{01F6EF}\\u{01F6F0}\\u{01F6F1}-\\u{01F6F2}\\u{01F6F3}\\u{01F6F4}-\\u{01F6F6}\\u{01F6F7}-\\u{01F6F8}\\u{01F6F9}\\u{01F6FA}\\u{01F6FB}-\\u{01F6FC}\\u{01F6FD}-\\u{01F6FF}\\u{01F774}-\\u{01F77F}\\u{01F7D5}-\\u{01F7DF}\\u{01F7E0}-\\u{01F7EB}\\u{01F7EC}-\\u{01F7FF}\\u{01F80C}-\\u{01F80F}\\u{01F848}-\\u{01F84F}\\u{01F85A}-\\u{01F85F}\\u{01F888}-\\u{01F88F}\\u{01F8AE}-\\u{01F8FF}\\u{01F90C}\\u{01F90D}-\\u{01F90F}\\u{01F910}-\\u{01F918}\\u{01F919}-\\u{01F91E}\\u{01F91F}\\u{01F920}-\\u{01F927}\\u{01F928}-\\u{01F92F}\\u{01F930}\\u{01F931}-\\u{01F932}\\u{01F933}-\\u{01F93A}\\u{01F93C}-\\u{01F93E}\\u{01F93F}\\u{01F940}-\\u{01F945}\\u{01F947}-\\u{01F94B}\\u{01F94C}\\u{01F94D}-\\u{01F94F}\\u{01F950}-\\u{01F95E}\\u{01F95F}-\\u{01F96B}\\u{01F96C}-\\u{01F970}\\u{01F971}\\u{01F972}\\u{01F973}-\\u{01F976}\\u{01F977}-\\u{01F978}\\u{01F979}\\u{01F97A}\\u{01F97B}\\u{01F97C}-\\u{01F97F}\\u{01F980}-\\u{01F984}\\u{01F985}-\\u{01F991}\\u{01F992}-\\u{01F997}\\u{01F998}-\\u{01F9A2}\\u{01F9A3}-\\u{01F9A4}\\u{01F9A5}-\\u{01F9AA}\\u{01F9AB}-\\u{01F9AD}\\u{01F9AE}-\\u{01F9AF}\\u{01F9B0}-\\u{01F9B9}\\u{01F9BA}-\\u{01F9BF}\\u{01F9C0}\\u{01F9C1}-\\u{01F9C2}\\u{01F9C3}-\\u{01F9CA}\\u{01F9CB}\\u{01F9CC}\\u{01F9CD}-\\u{01F9CF}\\u{01F9D0}-\\u{01F9E6}\\u{01F9E7}-\\u{01F9FF}\\u{01FA00}-\\u{01FA6F}\\u{01FA70}-\\u{01FA73}\\u{01FA74}\\u{01FA75}-\\u{01FA77}\\u{01FA78}-\\u{01FA7A}\\u{01FA7B}-\\u{01FA7F}\\u{01FA80}-\\u{01FA82}\\u{01FA83}-\\u{01FA86}\\u{01FA87}-\\u{01FA8F}\\u{01FA90}-\\u{01FA95}\\u{01FA96}-\\u{01FAA8}\\u{01FAA9}-\\u{01FAAF}\\u{01FAB0}-\\u{01FAB6}\\u{01FAB7}-\\u{01FABF}\\u{01FAC0}-\\u{01FAC2}\\u{01FAC3}-\\u{01FACF}\\u{01FAD0}-\\u{01FAD6}\\u{01FAD7}-\\u{01FAFF}\\u{01FC00}-\\u{01FFFD}]/u;\nexports.WORD_BREAK_PROPERTY = [\n    [/*start*/ 0x0, 0 /* Other */],\n    [/*start*/ 0xA, 1 /* LF */],\n    [/*start*/ 0xB, 2 /* Newline */],\n    [/*start*/ 0xD, 3 /* CR */],\n    [/*start*/ 0xE, 0 /* Other */],\n    [/*start*/ 0x20, 4 /* WSegSpace */],\n    [/*start*/ 0x21, 0 /* Other */],\n    [/*start*/ 0x22, 5 /* Double_Quote */],\n    [/*start*/ 0x23, 0 /* Other */],\n    [/*start*/ 0x27, 6 /* Single_Quote */],\n    [/*start*/ 0x28, 0 /* Other */],\n    [/*start*/ 0x2C, 7 /* MidNum */],\n    [/*start*/ 0x2D, 0 /* Other */],\n    [/*start*/ 0x2E, 8 /* MidNumLet */],\n    [/*start*/ 0x2F, 0 /* Other */],\n    [/*start*/ 0x30, 9 /* Numeric */],\n    [/*start*/ 0x3A, 10 /* MidLetter */],\n    [/*start*/ 0x3B, 7 /* MidNum */],\n    [/*start*/ 0x3C, 0 /* Other */],\n    [/*start*/ 0x41, 11 /* ALetter */],\n    [/*start*/ 0x5B, 0 /* Other */],\n    [/*start*/ 0x5F, 12 /* ExtendNumLet */],\n    [/*start*/ 0x60, 0 /* Other */],\n    [/*start*/ 0x61, 11 /* ALetter */],\n    [/*start*/ 0x7B, 0 /* Other */],\n    [/*start*/ 0x85, 2 /* Newline */],\n    [/*start*/ 0x86, 0 /* Other */],\n    [/*start*/ 0xAA, 11 /* ALetter */],\n    [/*start*/ 0xAB, 0 /* Other */],\n    [/*start*/ 0xAD, 13 /* Format */],\n    [/*start*/ 0xAE, 0 /* Other */],\n    [/*start*/ 0xB5, 11 /* ALetter */],\n    [/*start*/ 0xB6, 0 /* Other */],\n    [/*start*/ 0xB7, 10 /* MidLetter */],\n    [/*start*/ 0xB8, 0 /* Other */],\n    [/*start*/ 0xBA, 11 /* ALetter */],\n    [/*start*/ 0xBB, 0 /* Other */],\n    [/*start*/ 0xC0, 11 /* ALetter */],\n    [/*start*/ 0xD7, 0 /* Other */],\n    [/*start*/ 0xD8, 11 /* ALetter */],\n    [/*start*/ 0xF7, 0 /* Other */],\n    [/*start*/ 0xF8, 11 /* ALetter */],\n    [/*start*/ 0x2D8, 0 /* Other */],\n    [/*start*/ 0x2DE, 11 /* ALetter */],\n    [/*start*/ 0x300, 14 /* Extend */],\n    [/*start*/ 0x370, 11 /* ALetter */],\n    [/*start*/ 0x375, 0 /* Other */],\n    [/*start*/ 0x376, 11 /* ALetter */],\n    [/*start*/ 0x378, 0 /* Other */],\n    [/*start*/ 0x37A, 11 /* ALetter */],\n    [/*start*/ 0x37E, 7 /* MidNum */],\n    [/*start*/ 0x37F, 11 /* ALetter */],\n    [/*start*/ 0x380, 0 /* Other */],\n    [/*start*/ 0x386, 11 /* ALetter */],\n    [/*start*/ 0x387, 10 /* MidLetter */],\n    [/*start*/ 0x388, 11 /* ALetter */],\n    [/*start*/ 0x38B, 0 /* Other */],\n    [/*start*/ 0x38C, 11 /* ALetter */],\n    [/*start*/ 0x38D, 0 /* Other */],\n    [/*start*/ 0x38E, 11 /* ALetter */],\n    [/*start*/ 0x3A2, 0 /* Other */],\n    [/*start*/ 0x3A3, 11 /* ALetter */],\n    [/*start*/ 0x3F6, 0 /* Other */],\n    [/*start*/ 0x3F7, 11 /* ALetter */],\n    [/*start*/ 0x482, 0 /* Other */],\n    [/*start*/ 0x483, 14 /* Extend */],\n    [/*start*/ 0x48A, 11 /* ALetter */],\n    [/*start*/ 0x530, 0 /* Other */],\n    [/*start*/ 0x531, 11 /* ALetter */],\n    [/*start*/ 0x557, 0 /* Other */],\n    [/*start*/ 0x559, 11 /* ALetter */],\n    [/*start*/ 0x55D, 0 /* Other */],\n    [/*start*/ 0x55E, 11 /* ALetter */],\n    [/*start*/ 0x55F, 10 /* MidLetter */],\n    [/*start*/ 0x560, 11 /* ALetter */],\n    [/*start*/ 0x589, 7 /* MidNum */],\n    [/*start*/ 0x58A, 11 /* ALetter */],\n    [/*start*/ 0x58B, 0 /* Other */],\n    [/*start*/ 0x591, 14 /* Extend */],\n    [/*start*/ 0x5BE, 0 /* Other */],\n    [/*start*/ 0x5BF, 14 /* Extend */],\n    [/*start*/ 0x5C0, 0 /* Other */],\n    [/*start*/ 0x5C1, 14 /* Extend */],\n    [/*start*/ 0x5C3, 0 /* Other */],\n    [/*start*/ 0x5C4, 14 /* Extend */],\n    [/*start*/ 0x5C6, 0 /* Other */],\n    [/*start*/ 0x5C7, 14 /* Extend */],\n    [/*start*/ 0x5C8, 0 /* Other */],\n    [/*start*/ 0x5D0, 15 /* Hebrew_Letter */],\n    [/*start*/ 0x5EB, 0 /* Other */],\n    [/*start*/ 0x5EF, 15 /* Hebrew_Letter */],\n    [/*start*/ 0x5F3, 11 /* ALetter */],\n    [/*start*/ 0x5F4, 10 /* MidLetter */],\n    [/*start*/ 0x5F5, 0 /* Other */],\n    [/*start*/ 0x600, 13 /* Format */],\n    [/*start*/ 0x606, 0 /* Other */],\n    [/*start*/ 0x60C, 7 /* MidNum */],\n    [/*start*/ 0x60E, 0 /* Other */],\n    [/*start*/ 0x610, 14 /* Extend */],\n    [/*start*/ 0x61B, 0 /* Other */],\n    [/*start*/ 0x61C, 13 /* Format */],\n    [/*start*/ 0x61D, 0 /* Other */],\n    [/*start*/ 0x620, 11 /* ALetter */],\n    [/*start*/ 0x64B, 14 /* Extend */],\n    [/*start*/ 0x660, 9 /* Numeric */],\n    [/*start*/ 0x66A, 0 /* Other */],\n    [/*start*/ 0x66B, 9 /* Numeric */],\n    [/*start*/ 0x66C, 7 /* MidNum */],\n    [/*start*/ 0x66D, 0 /* Other */],\n    [/*start*/ 0x66E, 11 /* ALetter */],\n    [/*start*/ 0x670, 14 /* Extend */],\n    [/*start*/ 0x671, 11 /* ALetter */],\n    [/*start*/ 0x6D4, 0 /* Other */],\n    [/*start*/ 0x6D5, 11 /* ALetter */],\n    [/*start*/ 0x6D6, 14 /* Extend */],\n    [/*start*/ 0x6DD, 13 /* Format */],\n    [/*start*/ 0x6DE, 0 /* Other */],\n    [/*start*/ 0x6DF, 14 /* Extend */],\n    [/*start*/ 0x6E5, 11 /* ALetter */],\n    [/*start*/ 0x6E7, 14 /* Extend */],\n    [/*start*/ 0x6E9, 0 /* Other */],\n    [/*start*/ 0x6EA, 14 /* Extend */],\n    [/*start*/ 0x6EE, 11 /* ALetter */],\n    [/*start*/ 0x6F0, 9 /* Numeric */],\n    [/*start*/ 0x6FA, 11 /* ALetter */],\n    [/*start*/ 0x6FD, 0 /* Other */],\n    [/*start*/ 0x6FF, 11 /* ALetter */],\n    [/*start*/ 0x700, 0 /* Other */],\n    [/*start*/ 0x70F, 13 /* Format */],\n    [/*start*/ 0x710, 11 /* ALetter */],\n    [/*start*/ 0x711, 14 /* Extend */],\n    [/*start*/ 0x712, 11 /* ALetter */],\n    [/*start*/ 0x730, 14 /* Extend */],\n    [/*start*/ 0x74B, 0 /* Other */],\n    [/*start*/ 0x74D, 11 /* ALetter */],\n    [/*start*/ 0x7A6, 14 /* Extend */],\n    [/*start*/ 0x7B1, 11 /* ALetter */],\n    [/*start*/ 0x7B2, 0 /* Other */],\n    [/*start*/ 0x7C0, 9 /* Numeric */],\n    [/*start*/ 0x7CA, 11 /* ALetter */],\n    [/*start*/ 0x7EB, 14 /* Extend */],\n    [/*start*/ 0x7F4, 11 /* ALetter */],\n    [/*start*/ 0x7F6, 0 /* Other */],\n    [/*start*/ 0x7F8, 7 /* MidNum */],\n    [/*start*/ 0x7F9, 0 /* Other */],\n    [/*start*/ 0x7FA, 11 /* ALetter */],\n    [/*start*/ 0x7FB, 0 /* Other */],\n    [/*start*/ 0x7FD, 14 /* Extend */],\n    [/*start*/ 0x7FE, 0 /* Other */],\n    [/*start*/ 0x800, 11 /* ALetter */],\n    [/*start*/ 0x816, 14 /* Extend */],\n    [/*start*/ 0x81A, 11 /* ALetter */],\n    [/*start*/ 0x81B, 14 /* Extend */],\n    [/*start*/ 0x824, 11 /* ALetter */],\n    [/*start*/ 0x825, 14 /* Extend */],\n    [/*start*/ 0x828, 11 /* ALetter */],\n    [/*start*/ 0x829, 14 /* Extend */],\n    [/*start*/ 0x82E, 0 /* Other */],\n    [/*start*/ 0x840, 11 /* ALetter */],\n    [/*start*/ 0x859, 14 /* Extend */],\n    [/*start*/ 0x85C, 0 /* Other */],\n    [/*start*/ 0x860, 11 /* ALetter */],\n    [/*start*/ 0x86B, 0 /* Other */],\n    [/*start*/ 0x8A0, 11 /* ALetter */],\n    [/*start*/ 0x8B5, 0 /* Other */],\n    [/*start*/ 0x8B6, 11 /* ALetter */],\n    [/*start*/ 0x8C8, 0 /* Other */],\n    [/*start*/ 0x8D3, 14 /* Extend */],\n    [/*start*/ 0x8E2, 13 /* Format */],\n    [/*start*/ 0x8E3, 14 /* Extend */],\n    [/*start*/ 0x904, 11 /* ALetter */],\n    [/*start*/ 0x93A, 14 /* Extend */],\n    [/*start*/ 0x93D, 11 /* ALetter */],\n    [/*start*/ 0x93E, 14 /* Extend */],\n    [/*start*/ 0x950, 11 /* ALetter */],\n    [/*start*/ 0x951, 14 /* Extend */],\n    [/*start*/ 0x958, 11 /* ALetter */],\n    [/*start*/ 0x962, 14 /* Extend */],\n    [/*start*/ 0x964, 0 /* Other */],\n    [/*start*/ 0x966, 9 /* Numeric */],\n    [/*start*/ 0x970, 0 /* Other */],\n    [/*start*/ 0x971, 11 /* ALetter */],\n    [/*start*/ 0x981, 14 /* Extend */],\n    [/*start*/ 0x984, 0 /* Other */],\n    [/*start*/ 0x985, 11 /* ALetter */],\n    [/*start*/ 0x98D, 0 /* Other */],\n    [/*start*/ 0x98F, 11 /* ALetter */],\n    [/*start*/ 0x991, 0 /* Other */],\n    [/*start*/ 0x993, 11 /* ALetter */],\n    [/*start*/ 0x9A9, 0 /* Other */],\n    [/*start*/ 0x9AA, 11 /* ALetter */],\n    [/*start*/ 0x9B1, 0 /* Other */],\n    [/*start*/ 0x9B2, 11 /* ALetter */],\n    [/*start*/ 0x9B3, 0 /* Other */],\n    [/*start*/ 0x9B6, 11 /* ALetter */],\n    [/*start*/ 0x9BA, 0 /* Other */],\n    [/*start*/ 0x9BC, 14 /* Extend */],\n    [/*start*/ 0x9BD, 11 /* ALetter */],\n    [/*start*/ 0x9BE, 14 /* Extend */],\n    [/*start*/ 0x9C5, 0 /* Other */],\n    [/*start*/ 0x9C7, 14 /* Extend */],\n    [/*start*/ 0x9C9, 0 /* Other */],\n    [/*start*/ 0x9CB, 14 /* Extend */],\n    [/*start*/ 0x9CE, 11 /* ALetter */],\n    [/*start*/ 0x9CF, 0 /* Other */],\n    [/*start*/ 0x9D7, 14 /* Extend */],\n    [/*start*/ 0x9D8, 0 /* Other */],\n    [/*start*/ 0x9DC, 11 /* ALetter */],\n    [/*start*/ 0x9DE, 0 /* Other */],\n    [/*start*/ 0x9DF, 11 /* ALetter */],\n    [/*start*/ 0x9E2, 14 /* Extend */],\n    [/*start*/ 0x9E4, 0 /* Other */],\n    [/*start*/ 0x9E6, 9 /* Numeric */],\n    [/*start*/ 0x9F0, 11 /* ALetter */],\n    [/*start*/ 0x9F2, 0 /* Other */],\n    [/*start*/ 0x9FC, 11 /* ALetter */],\n    [/*start*/ 0x9FD, 0 /* Other */],\n    [/*start*/ 0x9FE, 14 /* Extend */],\n    [/*start*/ 0x9FF, 0 /* Other */],\n    [/*start*/ 0xA01, 14 /* Extend */],\n    [/*start*/ 0xA04, 0 /* Other */],\n    [/*start*/ 0xA05, 11 /* ALetter */],\n    [/*start*/ 0xA0B, 0 /* Other */],\n    [/*start*/ 0xA0F, 11 /* ALetter */],\n    [/*start*/ 0xA11, 0 /* Other */],\n    [/*start*/ 0xA13, 11 /* ALetter */],\n    [/*start*/ 0xA29, 0 /* Other */],\n    [/*start*/ 0xA2A, 11 /* ALetter */],\n    [/*start*/ 0xA31, 0 /* Other */],\n    [/*start*/ 0xA32, 11 /* ALetter */],\n    [/*start*/ 0xA34, 0 /* Other */],\n    [/*start*/ 0xA35, 11 /* ALetter */],\n    [/*start*/ 0xA37, 0 /* Other */],\n    [/*start*/ 0xA38, 11 /* ALetter */],\n    [/*start*/ 0xA3A, 0 /* Other */],\n    [/*start*/ 0xA3C, 14 /* Extend */],\n    [/*start*/ 0xA3D, 0 /* Other */],\n    [/*start*/ 0xA3E, 14 /* Extend */],\n    [/*start*/ 0xA43, 0 /* Other */],\n    [/*start*/ 0xA47, 14 /* Extend */],\n    [/*start*/ 0xA49, 0 /* Other */],\n    [/*start*/ 0xA4B, 14 /* Extend */],\n    [/*start*/ 0xA4E, 0 /* Other */],\n    [/*start*/ 0xA51, 14 /* Extend */],\n    [/*start*/ 0xA52, 0 /* Other */],\n    [/*start*/ 0xA59, 11 /* ALetter */],\n    [/*start*/ 0xA5D, 0 /* Other */],\n    [/*start*/ 0xA5E, 11 /* ALetter */],\n    [/*start*/ 0xA5F, 0 /* Other */],\n    [/*start*/ 0xA66, 9 /* Numeric */],\n    [/*start*/ 0xA70, 14 /* Extend */],\n    [/*start*/ 0xA72, 11 /* ALetter */],\n    [/*start*/ 0xA75, 14 /* Extend */],\n    [/*start*/ 0xA76, 0 /* Other */],\n    [/*start*/ 0xA81, 14 /* Extend */],\n    [/*start*/ 0xA84, 0 /* Other */],\n    [/*start*/ 0xA85, 11 /* ALetter */],\n    [/*start*/ 0xA8E, 0 /* Other */],\n    [/*start*/ 0xA8F, 11 /* ALetter */],\n    [/*start*/ 0xA92, 0 /* Other */],\n    [/*start*/ 0xA93, 11 /* ALetter */],\n    [/*start*/ 0xAA9, 0 /* Other */],\n    [/*start*/ 0xAAA, 11 /* ALetter */],\n    [/*start*/ 0xAB1, 0 /* Other */],\n    [/*start*/ 0xAB2, 11 /* ALetter */],\n    [/*start*/ 0xAB4, 0 /* Other */],\n    [/*start*/ 0xAB5, 11 /* ALetter */],\n    [/*start*/ 0xABA, 0 /* Other */],\n    [/*start*/ 0xABC, 14 /* Extend */],\n    [/*start*/ 0xABD, 11 /* ALetter */],\n    [/*start*/ 0xABE, 14 /* Extend */],\n    [/*start*/ 0xAC6, 0 /* Other */],\n    [/*start*/ 0xAC7, 14 /* Extend */],\n    [/*start*/ 0xACA, 0 /* Other */],\n    [/*start*/ 0xACB, 14 /* Extend */],\n    [/*start*/ 0xACE, 0 /* Other */],\n    [/*start*/ 0xAD0, 11 /* ALetter */],\n    [/*start*/ 0xAD1, 0 /* Other */],\n    [/*start*/ 0xAE0, 11 /* ALetter */],\n    [/*start*/ 0xAE2, 14 /* Extend */],\n    [/*start*/ 0xAE4, 0 /* Other */],\n    [/*start*/ 0xAE6, 9 /* Numeric */],\n    [/*start*/ 0xAF0, 0 /* Other */],\n    [/*start*/ 0xAF9, 11 /* ALetter */],\n    [/*start*/ 0xAFA, 14 /* Extend */],\n    [/*start*/ 0xB00, 0 /* Other */],\n    [/*start*/ 0xB01, 14 /* Extend */],\n    [/*start*/ 0xB04, 0 /* Other */],\n    [/*start*/ 0xB05, 11 /* ALetter */],\n    [/*start*/ 0xB0D, 0 /* Other */],\n    [/*start*/ 0xB0F, 11 /* ALetter */],\n    [/*start*/ 0xB11, 0 /* Other */],\n    [/*start*/ 0xB13, 11 /* ALetter */],\n    [/*start*/ 0xB29, 0 /* Other */],\n    [/*start*/ 0xB2A, 11 /* ALetter */],\n    [/*start*/ 0xB31, 0 /* Other */],\n    [/*start*/ 0xB32, 11 /* ALetter */],\n    [/*start*/ 0xB34, 0 /* Other */],\n    [/*start*/ 0xB35, 11 /* ALetter */],\n    [/*start*/ 0xB3A, 0 /* Other */],\n    [/*start*/ 0xB3C, 14 /* Extend */],\n    [/*start*/ 0xB3D, 11 /* ALetter */],\n    [/*start*/ 0xB3E, 14 /* Extend */],\n    [/*start*/ 0xB45, 0 /* Other */],\n    [/*start*/ 0xB47, 14 /* Extend */],\n    [/*start*/ 0xB49, 0 /* Other */],\n    [/*start*/ 0xB4B, 14 /* Extend */],\n    [/*start*/ 0xB4E, 0 /* Other */],\n    [/*start*/ 0xB55, 14 /* Extend */],\n    [/*start*/ 0xB58, 0 /* Other */],\n    [/*start*/ 0xB5C, 11 /* ALetter */],\n    [/*start*/ 0xB5E, 0 /* Other */],\n    [/*start*/ 0xB5F, 11 /* ALetter */],\n    [/*start*/ 0xB62, 14 /* Extend */],\n    [/*start*/ 0xB64, 0 /* Other */],\n    [/*start*/ 0xB66, 9 /* Numeric */],\n    [/*start*/ 0xB70, 0 /* Other */],\n    [/*start*/ 0xB71, 11 /* ALetter */],\n    [/*start*/ 0xB72, 0 /* Other */],\n    [/*start*/ 0xB82, 14 /* Extend */],\n    [/*start*/ 0xB83, 11 /* ALetter */],\n    [/*start*/ 0xB84, 0 /* Other */],\n    [/*start*/ 0xB85, 11 /* ALetter */],\n    [/*start*/ 0xB8B, 0 /* Other */],\n    [/*start*/ 0xB8E, 11 /* ALetter */],\n    [/*start*/ 0xB91, 0 /* Other */],\n    [/*start*/ 0xB92, 11 /* ALetter */],\n    [/*start*/ 0xB96, 0 /* Other */],\n    [/*start*/ 0xB99, 11 /* ALetter */],\n    [/*start*/ 0xB9B, 0 /* Other */],\n    [/*start*/ 0xB9C, 11 /* ALetter */],\n    [/*start*/ 0xB9D, 0 /* Other */],\n    [/*start*/ 0xB9E, 11 /* ALetter */],\n    [/*start*/ 0xBA0, 0 /* Other */],\n    [/*start*/ 0xBA3, 11 /* ALetter */],\n    [/*start*/ 0xBA5, 0 /* Other */],\n    [/*start*/ 0xBA8, 11 /* ALetter */],\n    [/*start*/ 0xBAB, 0 /* Other */],\n    [/*start*/ 0xBAE, 11 /* ALetter */],\n    [/*start*/ 0xBBA, 0 /* Other */],\n    [/*start*/ 0xBBE, 14 /* Extend */],\n    [/*start*/ 0xBC3, 0 /* Other */],\n    [/*start*/ 0xBC6, 14 /* Extend */],\n    [/*start*/ 0xBC9, 0 /* Other */],\n    [/*start*/ 0xBCA, 14 /* Extend */],\n    [/*start*/ 0xBCE, 0 /* Other */],\n    [/*start*/ 0xBD0, 11 /* ALetter */],\n    [/*start*/ 0xBD1, 0 /* Other */],\n    [/*start*/ 0xBD7, 14 /* Extend */],\n    [/*start*/ 0xBD8, 0 /* Other */],\n    [/*start*/ 0xBE6, 9 /* Numeric */],\n    [/*start*/ 0xBF0, 0 /* Other */],\n    [/*start*/ 0xC00, 14 /* Extend */],\n    [/*start*/ 0xC05, 11 /* ALetter */],\n    [/*start*/ 0xC0D, 0 /* Other */],\n    [/*start*/ 0xC0E, 11 /* ALetter */],\n    [/*start*/ 0xC11, 0 /* Other */],\n    [/*start*/ 0xC12, 11 /* ALetter */],\n    [/*start*/ 0xC29, 0 /* Other */],\n    [/*start*/ 0xC2A, 11 /* ALetter */],\n    [/*start*/ 0xC3A, 0 /* Other */],\n    [/*start*/ 0xC3D, 11 /* ALetter */],\n    [/*start*/ 0xC3E, 14 /* Extend */],\n    [/*start*/ 0xC45, 0 /* Other */],\n    [/*start*/ 0xC46, 14 /* Extend */],\n    [/*start*/ 0xC49, 0 /* Other */],\n    [/*start*/ 0xC4A, 14 /* Extend */],\n    [/*start*/ 0xC4E, 0 /* Other */],\n    [/*start*/ 0xC55, 14 /* Extend */],\n    [/*start*/ 0xC57, 0 /* Other */],\n    [/*start*/ 0xC58, 11 /* ALetter */],\n    [/*start*/ 0xC5B, 0 /* Other */],\n    [/*start*/ 0xC60, 11 /* ALetter */],\n    [/*start*/ 0xC62, 14 /* Extend */],\n    [/*start*/ 0xC64, 0 /* Other */],\n    [/*start*/ 0xC66, 9 /* Numeric */],\n    [/*start*/ 0xC70, 0 /* Other */],\n    [/*start*/ 0xC80, 11 /* ALetter */],\n    [/*start*/ 0xC81, 14 /* Extend */],\n    [/*start*/ 0xC84, 0 /* Other */],\n    [/*start*/ 0xC85, 11 /* ALetter */],\n    [/*start*/ 0xC8D, 0 /* Other */],\n    [/*start*/ 0xC8E, 11 /* ALetter */],\n    [/*start*/ 0xC91, 0 /* Other */],\n    [/*start*/ 0xC92, 11 /* ALetter */],\n    [/*start*/ 0xCA9, 0 /* Other */],\n    [/*start*/ 0xCAA, 11 /* ALetter */],\n    [/*start*/ 0xCB4, 0 /* Other */],\n    [/*start*/ 0xCB5, 11 /* ALetter */],\n    [/*start*/ 0xCBA, 0 /* Other */],\n    [/*start*/ 0xCBC, 14 /* Extend */],\n    [/*start*/ 0xCBD, 11 /* ALetter */],\n    [/*start*/ 0xCBE, 14 /* Extend */],\n    [/*start*/ 0xCC5, 0 /* Other */],\n    [/*start*/ 0xCC6, 14 /* Extend */],\n    [/*start*/ 0xCC9, 0 /* Other */],\n    [/*start*/ 0xCCA, 14 /* Extend */],\n    [/*start*/ 0xCCE, 0 /* Other */],\n    [/*start*/ 0xCD5, 14 /* Extend */],\n    [/*start*/ 0xCD7, 0 /* Other */],\n    [/*start*/ 0xCDE, 11 /* ALetter */],\n    [/*start*/ 0xCDF, 0 /* Other */],\n    [/*start*/ 0xCE0, 11 /* ALetter */],\n    [/*start*/ 0xCE2, 14 /* Extend */],\n    [/*start*/ 0xCE4, 0 /* Other */],\n    [/*start*/ 0xCE6, 9 /* Numeric */],\n    [/*start*/ 0xCF0, 0 /* Other */],\n    [/*start*/ 0xCF1, 11 /* ALetter */],\n    [/*start*/ 0xCF3, 0 /* Other */],\n    [/*start*/ 0xD00, 14 /* Extend */],\n    [/*start*/ 0xD04, 11 /* ALetter */],\n    [/*start*/ 0xD0D, 0 /* Other */],\n    [/*start*/ 0xD0E, 11 /* ALetter */],\n    [/*start*/ 0xD11, 0 /* Other */],\n    [/*start*/ 0xD12, 11 /* ALetter */],\n    [/*start*/ 0xD3B, 14 /* Extend */],\n    [/*start*/ 0xD3D, 11 /* ALetter */],\n    [/*start*/ 0xD3E, 14 /* Extend */],\n    [/*start*/ 0xD45, 0 /* Other */],\n    [/*start*/ 0xD46, 14 /* Extend */],\n    [/*start*/ 0xD49, 0 /* Other */],\n    [/*start*/ 0xD4A, 14 /* Extend */],\n    [/*start*/ 0xD4E, 11 /* ALetter */],\n    [/*start*/ 0xD4F, 0 /* Other */],\n    [/*start*/ 0xD54, 11 /* ALetter */],\n    [/*start*/ 0xD57, 14 /* Extend */],\n    [/*start*/ 0xD58, 0 /* Other */],\n    [/*start*/ 0xD5F, 11 /* ALetter */],\n    [/*start*/ 0xD62, 14 /* Extend */],\n    [/*start*/ 0xD64, 0 /* Other */],\n    [/*start*/ 0xD66, 9 /* Numeric */],\n    [/*start*/ 0xD70, 0 /* Other */],\n    [/*start*/ 0xD7A, 11 /* ALetter */],\n    [/*start*/ 0xD80, 0 /* Other */],\n    [/*start*/ 0xD81, 14 /* Extend */],\n    [/*start*/ 0xD84, 0 /* Other */],\n    [/*start*/ 0xD85, 11 /* ALetter */],\n    [/*start*/ 0xD97, 0 /* Other */],\n    [/*start*/ 0xD9A, 11 /* ALetter */],\n    [/*start*/ 0xDB2, 0 /* Other */],\n    [/*start*/ 0xDB3, 11 /* ALetter */],\n    [/*start*/ 0xDBC, 0 /* Other */],\n    [/*start*/ 0xDBD, 11 /* ALetter */],\n    [/*start*/ 0xDBE, 0 /* Other */],\n    [/*start*/ 0xDC0, 11 /* ALetter */],\n    [/*start*/ 0xDC7, 0 /* Other */],\n    [/*start*/ 0xDCA, 14 /* Extend */],\n    [/*start*/ 0xDCB, 0 /* Other */],\n    [/*start*/ 0xDCF, 14 /* Extend */],\n    [/*start*/ 0xDD5, 0 /* Other */],\n    [/*start*/ 0xDD6, 14 /* Extend */],\n    [/*start*/ 0xDD7, 0 /* Other */],\n    [/*start*/ 0xDD8, 14 /* Extend */],\n    [/*start*/ 0xDE0, 0 /* Other */],\n    [/*start*/ 0xDE6, 9 /* Numeric */],\n    [/*start*/ 0xDF0, 0 /* Other */],\n    [/*start*/ 0xDF2, 14 /* Extend */],\n    [/*start*/ 0xDF4, 0 /* Other */],\n    [/*start*/ 0xE31, 14 /* Extend */],\n    [/*start*/ 0xE32, 0 /* Other */],\n    [/*start*/ 0xE34, 14 /* Extend */],\n    [/*start*/ 0xE3B, 0 /* Other */],\n    [/*start*/ 0xE47, 14 /* Extend */],\n    [/*start*/ 0xE4F, 0 /* Other */],\n    [/*start*/ 0xE50, 9 /* Numeric */],\n    [/*start*/ 0xE5A, 0 /* Other */],\n    [/*start*/ 0xEB1, 14 /* Extend */],\n    [/*start*/ 0xEB2, 0 /* Other */],\n    [/*start*/ 0xEB4, 14 /* Extend */],\n    [/*start*/ 0xEBD, 0 /* Other */],\n    [/*start*/ 0xEC8, 14 /* Extend */],\n    [/*start*/ 0xECE, 0 /* Other */],\n    [/*start*/ 0xED0, 9 /* Numeric */],\n    [/*start*/ 0xEDA, 0 /* Other */],\n    [/*start*/ 0xF00, 11 /* ALetter */],\n    [/*start*/ 0xF01, 0 /* Other */],\n    [/*start*/ 0xF18, 14 /* Extend */],\n    [/*start*/ 0xF1A, 0 /* Other */],\n    [/*start*/ 0xF20, 9 /* Numeric */],\n    [/*start*/ 0xF2A, 0 /* Other */],\n    [/*start*/ 0xF35, 14 /* Extend */],\n    [/*start*/ 0xF36, 0 /* Other */],\n    [/*start*/ 0xF37, 14 /* Extend */],\n    [/*start*/ 0xF38, 0 /* Other */],\n    [/*start*/ 0xF39, 14 /* Extend */],\n    [/*start*/ 0xF3A, 0 /* Other */],\n    [/*start*/ 0xF3E, 14 /* Extend */],\n    [/*start*/ 0xF40, 11 /* ALetter */],\n    [/*start*/ 0xF48, 0 /* Other */],\n    [/*start*/ 0xF49, 11 /* ALetter */],\n    [/*start*/ 0xF6D, 0 /* Other */],\n    [/*start*/ 0xF71, 14 /* Extend */],\n    [/*start*/ 0xF85, 0 /* Other */],\n    [/*start*/ 0xF86, 14 /* Extend */],\n    [/*start*/ 0xF88, 11 /* ALetter */],\n    [/*start*/ 0xF8D, 14 /* Extend */],\n    [/*start*/ 0xF98, 0 /* Other */],\n    [/*start*/ 0xF99, 14 /* Extend */],\n    [/*start*/ 0xFBD, 0 /* Other */],\n    [/*start*/ 0xFC6, 14 /* Extend */],\n    [/*start*/ 0xFC7, 0 /* Other */],\n    [/*start*/ 0x102B, 14 /* Extend */],\n    [/*start*/ 0x103F, 0 /* Other */],\n    [/*start*/ 0x1040, 9 /* Numeric */],\n    [/*start*/ 0x104A, 0 /* Other */],\n    [/*start*/ 0x1056, 14 /* Extend */],\n    [/*start*/ 0x105A, 0 /* Other */],\n    [/*start*/ 0x105E, 14 /* Extend */],\n    [/*start*/ 0x1061, 0 /* Other */],\n    [/*start*/ 0x1062, 14 /* Extend */],\n    [/*start*/ 0x1065, 0 /* Other */],\n    [/*start*/ 0x1067, 14 /* Extend */],\n    [/*start*/ 0x106E, 0 /* Other */],\n    [/*start*/ 0x1071, 14 /* Extend */],\n    [/*start*/ 0x1075, 0 /* Other */],\n    [/*start*/ 0x1082, 14 /* Extend */],\n    [/*start*/ 0x108E, 0 /* Other */],\n    [/*start*/ 0x108F, 14 /* Extend */],\n    [/*start*/ 0x1090, 9 /* Numeric */],\n    [/*start*/ 0x109A, 14 /* Extend */],\n    [/*start*/ 0x109E, 0 /* Other */],\n    [/*start*/ 0x10A0, 11 /* ALetter */],\n    [/*start*/ 0x10C6, 0 /* Other */],\n    [/*start*/ 0x10C7, 11 /* ALetter */],\n    [/*start*/ 0x10C8, 0 /* Other */],\n    [/*start*/ 0x10CD, 11 /* ALetter */],\n    [/*start*/ 0x10CE, 0 /* Other */],\n    [/*start*/ 0x10D0, 11 /* ALetter */],\n    [/*start*/ 0x10FB, 0 /* Other */],\n    [/*start*/ 0x10FC, 11 /* ALetter */],\n    [/*start*/ 0x1249, 0 /* Other */],\n    [/*start*/ 0x124A, 11 /* ALetter */],\n    [/*start*/ 0x124E, 0 /* Other */],\n    [/*start*/ 0x1250, 11 /* ALetter */],\n    [/*start*/ 0x1257, 0 /* Other */],\n    [/*start*/ 0x1258, 11 /* ALetter */],\n    [/*start*/ 0x1259, 0 /* Other */],\n    [/*start*/ 0x125A, 11 /* ALetter */],\n    [/*start*/ 0x125E, 0 /* Other */],\n    [/*start*/ 0x1260, 11 /* ALetter */],\n    [/*start*/ 0x1289, 0 /* Other */],\n    [/*start*/ 0x128A, 11 /* ALetter */],\n    [/*start*/ 0x128E, 0 /* Other */],\n    [/*start*/ 0x1290, 11 /* ALetter */],\n    [/*start*/ 0x12B1, 0 /* Other */],\n    [/*start*/ 0x12B2, 11 /* ALetter */],\n    [/*start*/ 0x12B6, 0 /* Other */],\n    [/*start*/ 0x12B8, 11 /* ALetter */],\n    [/*start*/ 0x12BF, 0 /* Other */],\n    [/*start*/ 0x12C0, 11 /* ALetter */],\n    [/*start*/ 0x12C1, 0 /* Other */],\n    [/*start*/ 0x12C2, 11 /* ALetter */],\n    [/*start*/ 0x12C6, 0 /* Other */],\n    [/*start*/ 0x12C8, 11 /* ALetter */],\n    [/*start*/ 0x12D7, 0 /* Other */],\n    [/*start*/ 0x12D8, 11 /* ALetter */],\n    [/*start*/ 0x1311, 0 /* Other */],\n    [/*start*/ 0x1312, 11 /* ALetter */],\n    [/*start*/ 0x1316, 0 /* Other */],\n    [/*start*/ 0x1318, 11 /* ALetter */],\n    [/*start*/ 0x135B, 0 /* Other */],\n    [/*start*/ 0x135D, 14 /* Extend */],\n    [/*start*/ 0x1360, 0 /* Other */],\n    [/*start*/ 0x1380, 11 /* ALetter */],\n    [/*start*/ 0x1390, 0 /* Other */],\n    [/*start*/ 0x13A0, 11 /* ALetter */],\n    [/*start*/ 0x13F6, 0 /* Other */],\n    [/*start*/ 0x13F8, 11 /* ALetter */],\n    [/*start*/ 0x13FE, 0 /* Other */],\n    [/*start*/ 0x1401, 11 /* ALetter */],\n    [/*start*/ 0x166D, 0 /* Other */],\n    [/*start*/ 0x166F, 11 /* ALetter */],\n    [/*start*/ 0x1680, 4 /* WSegSpace */],\n    [/*start*/ 0x1681, 11 /* ALetter */],\n    [/*start*/ 0x169B, 0 /* Other */],\n    [/*start*/ 0x16A0, 11 /* ALetter */],\n    [/*start*/ 0x16EB, 0 /* Other */],\n    [/*start*/ 0x16EE, 11 /* ALetter */],\n    [/*start*/ 0x16F9, 0 /* Other */],\n    [/*start*/ 0x1700, 11 /* ALetter */],\n    [/*start*/ 0x170D, 0 /* Other */],\n    [/*start*/ 0x170E, 11 /* ALetter */],\n    [/*start*/ 0x1712, 14 /* Extend */],\n    [/*start*/ 0x1715, 0 /* Other */],\n    [/*start*/ 0x1720, 11 /* ALetter */],\n    [/*start*/ 0x1732, 14 /* Extend */],\n    [/*start*/ 0x1735, 0 /* Other */],\n    [/*start*/ 0x1740, 11 /* ALetter */],\n    [/*start*/ 0x1752, 14 /* Extend */],\n    [/*start*/ 0x1754, 0 /* Other */],\n    [/*start*/ 0x1760, 11 /* ALetter */],\n    [/*start*/ 0x176D, 0 /* Other */],\n    [/*start*/ 0x176E, 11 /* ALetter */],\n    [/*start*/ 0x1771, 0 /* Other */],\n    [/*start*/ 0x1772, 14 /* Extend */],\n    [/*start*/ 0x1774, 0 /* Other */],\n    [/*start*/ 0x17B4, 14 /* Extend */],\n    [/*start*/ 0x17D4, 0 /* Other */],\n    [/*start*/ 0x17DD, 14 /* Extend */],\n    [/*start*/ 0x17DE, 0 /* Other */],\n    [/*start*/ 0x17E0, 9 /* Numeric */],\n    [/*start*/ 0x17EA, 0 /* Other */],\n    [/*start*/ 0x180B, 14 /* Extend */],\n    [/*start*/ 0x180E, 13 /* Format */],\n    [/*start*/ 0x180F, 0 /* Other */],\n    [/*start*/ 0x1810, 9 /* Numeric */],\n    [/*start*/ 0x181A, 0 /* Other */],\n    [/*start*/ 0x1820, 11 /* ALetter */],\n    [/*start*/ 0x1879, 0 /* Other */],\n    [/*start*/ 0x1880, 11 /* ALetter */],\n    [/*start*/ 0x1885, 14 /* Extend */],\n    [/*start*/ 0x1887, 11 /* ALetter */],\n    [/*start*/ 0x18A9, 14 /* Extend */],\n    [/*start*/ 0x18AA, 11 /* ALetter */],\n    [/*start*/ 0x18AB, 0 /* Other */],\n    [/*start*/ 0x18B0, 11 /* ALetter */],\n    [/*start*/ 0x18F6, 0 /* Other */],\n    [/*start*/ 0x1900, 11 /* ALetter */],\n    [/*start*/ 0x191F, 0 /* Other */],\n    [/*start*/ 0x1920, 14 /* Extend */],\n    [/*start*/ 0x192C, 0 /* Other */],\n    [/*start*/ 0x1930, 14 /* Extend */],\n    [/*start*/ 0x193C, 0 /* Other */],\n    [/*start*/ 0x1946, 9 /* Numeric */],\n    [/*start*/ 0x1950, 0 /* Other */],\n    [/*start*/ 0x19D0, 9 /* Numeric */],\n    [/*start*/ 0x19DA, 0 /* Other */],\n    [/*start*/ 0x1A00, 11 /* ALetter */],\n    [/*start*/ 0x1A17, 14 /* Extend */],\n    [/*start*/ 0x1A1C, 0 /* Other */],\n    [/*start*/ 0x1A55, 14 /* Extend */],\n    [/*start*/ 0x1A5F, 0 /* Other */],\n    [/*start*/ 0x1A60, 14 /* Extend */],\n    [/*start*/ 0x1A7D, 0 /* Other */],\n    [/*start*/ 0x1A7F, 14 /* Extend */],\n    [/*start*/ 0x1A80, 9 /* Numeric */],\n    [/*start*/ 0x1A8A, 0 /* Other */],\n    [/*start*/ 0x1A90, 9 /* Numeric */],\n    [/*start*/ 0x1A9A, 0 /* Other */],\n    [/*start*/ 0x1AB0, 14 /* Extend */],\n    [/*start*/ 0x1AC1, 0 /* Other */],\n    [/*start*/ 0x1B00, 14 /* Extend */],\n    [/*start*/ 0x1B05, 11 /* ALetter */],\n    [/*start*/ 0x1B34, 14 /* Extend */],\n    [/*start*/ 0x1B45, 11 /* ALetter */],\n    [/*start*/ 0x1B4C, 0 /* Other */],\n    [/*start*/ 0x1B50, 9 /* Numeric */],\n    [/*start*/ 0x1B5A, 0 /* Other */],\n    [/*start*/ 0x1B6B, 14 /* Extend */],\n    [/*start*/ 0x1B74, 0 /* Other */],\n    [/*start*/ 0x1B80, 14 /* Extend */],\n    [/*start*/ 0x1B83, 11 /* ALetter */],\n    [/*start*/ 0x1BA1, 14 /* Extend */],\n    [/*start*/ 0x1BAE, 11 /* ALetter */],\n    [/*start*/ 0x1BB0, 9 /* Numeric */],\n    [/*start*/ 0x1BBA, 11 /* ALetter */],\n    [/*start*/ 0x1BE6, 14 /* Extend */],\n    [/*start*/ 0x1BF4, 0 /* Other */],\n    [/*start*/ 0x1C00, 11 /* ALetter */],\n    [/*start*/ 0x1C24, 14 /* Extend */],\n    [/*start*/ 0x1C38, 0 /* Other */],\n    [/*start*/ 0x1C40, 9 /* Numeric */],\n    [/*start*/ 0x1C4A, 0 /* Other */],\n    [/*start*/ 0x1C4D, 11 /* ALetter */],\n    [/*start*/ 0x1C50, 9 /* Numeric */],\n    [/*start*/ 0x1C5A, 11 /* ALetter */],\n    [/*start*/ 0x1C7E, 0 /* Other */],\n    [/*start*/ 0x1C80, 11 /* ALetter */],\n    [/*start*/ 0x1C89, 0 /* Other */],\n    [/*start*/ 0x1C90, 11 /* ALetter */],\n    [/*start*/ 0x1CBB, 0 /* Other */],\n    [/*start*/ 0x1CBD, 11 /* ALetter */],\n    [/*start*/ 0x1CC0, 0 /* Other */],\n    [/*start*/ 0x1CD0, 14 /* Extend */],\n    [/*start*/ 0x1CD3, 0 /* Other */],\n    [/*start*/ 0x1CD4, 14 /* Extend */],\n    [/*start*/ 0x1CE9, 11 /* ALetter */],\n    [/*start*/ 0x1CED, 14 /* Extend */],\n    [/*start*/ 0x1CEE, 11 /* ALetter */],\n    [/*start*/ 0x1CF4, 14 /* Extend */],\n    [/*start*/ 0x1CF5, 11 /* ALetter */],\n    [/*start*/ 0x1CF7, 14 /* Extend */],\n    [/*start*/ 0x1CFA, 11 /* ALetter */],\n    [/*start*/ 0x1CFB, 0 /* Other */],\n    [/*start*/ 0x1D00, 11 /* ALetter */],\n    [/*start*/ 0x1DC0, 14 /* Extend */],\n    [/*start*/ 0x1DFA, 0 /* Other */],\n    [/*start*/ 0x1DFB, 14 /* Extend */],\n    [/*start*/ 0x1E00, 11 /* ALetter */],\n    [/*start*/ 0x1F16, 0 /* Other */],\n    [/*start*/ 0x1F18, 11 /* ALetter */],\n    [/*start*/ 0x1F1E, 0 /* Other */],\n    [/*start*/ 0x1F20, 11 /* ALetter */],\n    [/*start*/ 0x1F46, 0 /* Other */],\n    [/*start*/ 0x1F48, 11 /* ALetter */],\n    [/*start*/ 0x1F4E, 0 /* Other */],\n    [/*start*/ 0x1F50, 11 /* ALetter */],\n    [/*start*/ 0x1F58, 0 /* Other */],\n    [/*start*/ 0x1F59, 11 /* ALetter */],\n    [/*start*/ 0x1F5A, 0 /* Other */],\n    [/*start*/ 0x1F5B, 11 /* ALetter */],\n    [/*start*/ 0x1F5C, 0 /* Other */],\n    [/*start*/ 0x1F5D, 11 /* ALetter */],\n    [/*start*/ 0x1F5E, 0 /* Other */],\n    [/*start*/ 0x1F5F, 11 /* ALetter */],\n    [/*start*/ 0x1F7E, 0 /* Other */],\n    [/*start*/ 0x1F80, 11 /* ALetter */],\n    [/*start*/ 0x1FB5, 0 /* Other */],\n    [/*start*/ 0x1FB6, 11 /* ALetter */],\n    [/*start*/ 0x1FBD, 0 /* Other */],\n    [/*start*/ 0x1FBE, 11 /* ALetter */],\n    [/*start*/ 0x1FBF, 0 /* Other */],\n    [/*start*/ 0x1FC2, 11 /* ALetter */],\n    [/*start*/ 0x1FC5, 0 /* Other */],\n    [/*start*/ 0x1FC6, 11 /* ALetter */],\n    [/*start*/ 0x1FCD, 0 /* Other */],\n    [/*start*/ 0x1FD0, 11 /* ALetter */],\n    [/*start*/ 0x1FD4, 0 /* Other */],\n    [/*start*/ 0x1FD6, 11 /* ALetter */],\n    [/*start*/ 0x1FDC, 0 /* Other */],\n    [/*start*/ 0x1FE0, 11 /* ALetter */],\n    [/*start*/ 0x1FED, 0 /* Other */],\n    [/*start*/ 0x1FF2, 11 /* ALetter */],\n    [/*start*/ 0x1FF5, 0 /* Other */],\n    [/*start*/ 0x1FF6, 11 /* ALetter */],\n    [/*start*/ 0x1FFD, 0 /* Other */],\n    [/*start*/ 0x2000, 4 /* WSegSpace */],\n    [/*start*/ 0x2007, 0 /* Other */],\n    [/*start*/ 0x2008, 4 /* WSegSpace */],\n    [/*start*/ 0x200B, 0 /* Other */],\n    [/*start*/ 0x200C, 14 /* Extend */],\n    [/*start*/ 0x200D, 16 /* ZWJ */],\n    [/*start*/ 0x200E, 13 /* Format */],\n    [/*start*/ 0x2010, 0 /* Other */],\n    [/*start*/ 0x2018, 8 /* MidNumLet */],\n    [/*start*/ 0x201A, 0 /* Other */],\n    [/*start*/ 0x2024, 8 /* MidNumLet */],\n    [/*start*/ 0x2025, 0 /* Other */],\n    [/*start*/ 0x2027, 10 /* MidLetter */],\n    [/*start*/ 0x2028, 2 /* Newline */],\n    [/*start*/ 0x202A, 13 /* Format */],\n    [/*start*/ 0x202F, 12 /* ExtendNumLet */],\n    [/*start*/ 0x2030, 0 /* Other */],\n    [/*start*/ 0x203F, 12 /* ExtendNumLet */],\n    [/*start*/ 0x2041, 0 /* Other */],\n    [/*start*/ 0x2044, 7 /* MidNum */],\n    [/*start*/ 0x2045, 0 /* Other */],\n    [/*start*/ 0x2054, 12 /* ExtendNumLet */],\n    [/*start*/ 0x2055, 0 /* Other */],\n    [/*start*/ 0x205F, 4 /* WSegSpace */],\n    [/*start*/ 0x2060, 13 /* Format */],\n    [/*start*/ 0x2065, 0 /* Other */],\n    [/*start*/ 0x2066, 13 /* Format */],\n    [/*start*/ 0x2070, 0 /* Other */],\n    [/*start*/ 0x2071, 11 /* ALetter */],\n    [/*start*/ 0x2072, 0 /* Other */],\n    [/*start*/ 0x207F, 11 /* ALetter */],\n    [/*start*/ 0x2080, 0 /* Other */],\n    [/*start*/ 0x2090, 11 /* ALetter */],\n    [/*start*/ 0x209D, 0 /* Other */],\n    [/*start*/ 0x20D0, 14 /* Extend */],\n    [/*start*/ 0x20F1, 0 /* Other */],\n    [/*start*/ 0x2102, 11 /* ALetter */],\n    [/*start*/ 0x2103, 0 /* Other */],\n    [/*start*/ 0x2107, 11 /* ALetter */],\n    [/*start*/ 0x2108, 0 /* Other */],\n    [/*start*/ 0x210A, 11 /* ALetter */],\n    [/*start*/ 0x2114, 0 /* Other */],\n    [/*start*/ 0x2115, 11 /* ALetter */],\n    [/*start*/ 0x2116, 0 /* Other */],\n    [/*start*/ 0x2119, 11 /* ALetter */],\n    [/*start*/ 0x211E, 0 /* Other */],\n    [/*start*/ 0x2124, 11 /* ALetter */],\n    [/*start*/ 0x2125, 0 /* Other */],\n    [/*start*/ 0x2126, 11 /* ALetter */],\n    [/*start*/ 0x2127, 0 /* Other */],\n    [/*start*/ 0x2128, 11 /* ALetter */],\n    [/*start*/ 0x2129, 0 /* Other */],\n    [/*start*/ 0x212A, 11 /* ALetter */],\n    [/*start*/ 0x212E, 0 /* Other */],\n    [/*start*/ 0x212F, 11 /* ALetter */],\n    [/*start*/ 0x213A, 0 /* Other */],\n    [/*start*/ 0x213C, 11 /* ALetter */],\n    [/*start*/ 0x2140, 0 /* Other */],\n    [/*start*/ 0x2145, 11 /* ALetter */],\n    [/*start*/ 0x214A, 0 /* Other */],\n    [/*start*/ 0x214E, 11 /* ALetter */],\n    [/*start*/ 0x214F, 0 /* Other */],\n    [/*start*/ 0x2160, 11 /* ALetter */],\n    [/*start*/ 0x2189, 0 /* Other */],\n    [/*start*/ 0x24B6, 11 /* ALetter */],\n    [/*start*/ 0x24EA, 0 /* Other */],\n    [/*start*/ 0x2C00, 11 /* ALetter */],\n    [/*start*/ 0x2C2F, 0 /* Other */],\n    [/*start*/ 0x2C30, 11 /* ALetter */],\n    [/*start*/ 0x2C5F, 0 /* Other */],\n    [/*start*/ 0x2C60, 11 /* ALetter */],\n    [/*start*/ 0x2CE5, 0 /* Other */],\n    [/*start*/ 0x2CEB, 11 /* ALetter */],\n    [/*start*/ 0x2CEF, 14 /* Extend */],\n    [/*start*/ 0x2CF2, 11 /* ALetter */],\n    [/*start*/ 0x2CF4, 0 /* Other */],\n    [/*start*/ 0x2D00, 11 /* ALetter */],\n    [/*start*/ 0x2D26, 0 /* Other */],\n    [/*start*/ 0x2D27, 11 /* ALetter */],\n    [/*start*/ 0x2D28, 0 /* Other */],\n    [/*start*/ 0x2D2D, 11 /* ALetter */],\n    [/*start*/ 0x2D2E, 0 /* Other */],\n    [/*start*/ 0x2D30, 11 /* ALetter */],\n    [/*start*/ 0x2D68, 0 /* Other */],\n    [/*start*/ 0x2D6F, 11 /* ALetter */],\n    [/*start*/ 0x2D70, 0 /* Other */],\n    [/*start*/ 0x2D7F, 14 /* Extend */],\n    [/*start*/ 0x2D80, 11 /* ALetter */],\n    [/*start*/ 0x2D97, 0 /* Other */],\n    [/*start*/ 0x2DA0, 11 /* ALetter */],\n    [/*start*/ 0x2DA7, 0 /* Other */],\n    [/*start*/ 0x2DA8, 11 /* ALetter */],\n    [/*start*/ 0x2DAF, 0 /* Other */],\n    [/*start*/ 0x2DB0, 11 /* ALetter */],\n    [/*start*/ 0x2DB7, 0 /* Other */],\n    [/*start*/ 0x2DB8, 11 /* ALetter */],\n    [/*start*/ 0x2DBF, 0 /* Other */],\n    [/*start*/ 0x2DC0, 11 /* ALetter */],\n    [/*start*/ 0x2DC7, 0 /* Other */],\n    [/*start*/ 0x2DC8, 11 /* ALetter */],\n    [/*start*/ 0x2DCF, 0 /* Other */],\n    [/*start*/ 0x2DD0, 11 /* ALetter */],\n    [/*start*/ 0x2DD7, 0 /* Other */],\n    [/*start*/ 0x2DD8, 11 /* ALetter */],\n    [/*start*/ 0x2DDF, 0 /* Other */],\n    [/*start*/ 0x2DE0, 14 /* Extend */],\n    [/*start*/ 0x2E00, 0 /* Other */],\n    [/*start*/ 0x2E2F, 11 /* ALetter */],\n    [/*start*/ 0x2E30, 0 /* Other */],\n    [/*start*/ 0x3000, 4 /* WSegSpace */],\n    [/*start*/ 0x3001, 0 /* Other */],\n    [/*start*/ 0x3005, 11 /* ALetter */],\n    [/*start*/ 0x3006, 0 /* Other */],\n    [/*start*/ 0x302A, 14 /* Extend */],\n    [/*start*/ 0x3030, 0 /* Other */],\n    [/*start*/ 0x3031, 17 /* Katakana */],\n    [/*start*/ 0x3036, 0 /* Other */],\n    [/*start*/ 0x303B, 11 /* ALetter */],\n    [/*start*/ 0x303D, 0 /* Other */],\n    [/*start*/ 0x3099, 14 /* Extend */],\n    [/*start*/ 0x309B, 17 /* Katakana */],\n    [/*start*/ 0x309D, 0 /* Other */],\n    [/*start*/ 0x30A0, 17 /* Katakana */],\n    [/*start*/ 0x30FB, 0 /* Other */],\n    [/*start*/ 0x30FC, 17 /* Katakana */],\n    [/*start*/ 0x3100, 0 /* Other */],\n    [/*start*/ 0x3105, 11 /* ALetter */],\n    [/*start*/ 0x3130, 0 /* Other */],\n    [/*start*/ 0x3131, 11 /* ALetter */],\n    [/*start*/ 0x318F, 0 /* Other */],\n    [/*start*/ 0x31A0, 11 /* ALetter */],\n    [/*start*/ 0x31C0, 0 /* Other */],\n    [/*start*/ 0x31F0, 17 /* Katakana */],\n    [/*start*/ 0x3200, 0 /* Other */],\n    [/*start*/ 0x32D0, 17 /* Katakana */],\n    [/*start*/ 0x32FF, 0 /* Other */],\n    [/*start*/ 0x3300, 17 /* Katakana */],\n    [/*start*/ 0x3358, 0 /* Other */],\n    [/*start*/ 0xA000, 11 /* ALetter */],\n    [/*start*/ 0xA48D, 0 /* Other */],\n    [/*start*/ 0xA4D0, 11 /* ALetter */],\n    [/*start*/ 0xA4FE, 0 /* Other */],\n    [/*start*/ 0xA500, 11 /* ALetter */],\n    [/*start*/ 0xA60D, 0 /* Other */],\n    [/*start*/ 0xA610, 11 /* ALetter */],\n    [/*start*/ 0xA620, 9 /* Numeric */],\n    [/*start*/ 0xA62A, 11 /* ALetter */],\n    [/*start*/ 0xA62C, 0 /* Other */],\n    [/*start*/ 0xA640, 11 /* ALetter */],\n    [/*start*/ 0xA66F, 14 /* Extend */],\n    [/*start*/ 0xA673, 0 /* Other */],\n    [/*start*/ 0xA674, 14 /* Extend */],\n    [/*start*/ 0xA67E, 0 /* Other */],\n    [/*start*/ 0xA67F, 11 /* ALetter */],\n    [/*start*/ 0xA69E, 14 /* Extend */],\n    [/*start*/ 0xA6A0, 11 /* ALetter */],\n    [/*start*/ 0xA6F0, 14 /* Extend */],\n    [/*start*/ 0xA6F2, 0 /* Other */],\n    [/*start*/ 0xA708, 11 /* ALetter */],\n    [/*start*/ 0xA7C0, 0 /* Other */],\n    [/*start*/ 0xA7C2, 11 /* ALetter */],\n    [/*start*/ 0xA7CB, 0 /* Other */],\n    [/*start*/ 0xA7F5, 11 /* ALetter */],\n    [/*start*/ 0xA802, 14 /* Extend */],\n    [/*start*/ 0xA803, 11 /* ALetter */],\n    [/*start*/ 0xA806, 14 /* Extend */],\n    [/*start*/ 0xA807, 11 /* ALetter */],\n    [/*start*/ 0xA80B, 14 /* Extend */],\n    [/*start*/ 0xA80C, 11 /* ALetter */],\n    [/*start*/ 0xA823, 14 /* Extend */],\n    [/*start*/ 0xA828, 0 /* Other */],\n    [/*start*/ 0xA82C, 14 /* Extend */],\n    [/*start*/ 0xA82D, 0 /* Other */],\n    [/*start*/ 0xA840, 11 /* ALetter */],\n    [/*start*/ 0xA874, 0 /* Other */],\n    [/*start*/ 0xA880, 14 /* Extend */],\n    [/*start*/ 0xA882, 11 /* ALetter */],\n    [/*start*/ 0xA8B4, 14 /* Extend */],\n    [/*start*/ 0xA8C6, 0 /* Other */],\n    [/*start*/ 0xA8D0, 9 /* Numeric */],\n    [/*start*/ 0xA8DA, 0 /* Other */],\n    [/*start*/ 0xA8E0, 14 /* Extend */],\n    [/*start*/ 0xA8F2, 11 /* ALetter */],\n    [/*start*/ 0xA8F8, 0 /* Other */],\n    [/*start*/ 0xA8FB, 11 /* ALetter */],\n    [/*start*/ 0xA8FC, 0 /* Other */],\n    [/*start*/ 0xA8FD, 11 /* ALetter */],\n    [/*start*/ 0xA8FF, 14 /* Extend */],\n    [/*start*/ 0xA900, 9 /* Numeric */],\n    [/*start*/ 0xA90A, 11 /* ALetter */],\n    [/*start*/ 0xA926, 14 /* Extend */],\n    [/*start*/ 0xA92E, 0 /* Other */],\n    [/*start*/ 0xA930, 11 /* ALetter */],\n    [/*start*/ 0xA947, 14 /* Extend */],\n    [/*start*/ 0xA954, 0 /* Other */],\n    [/*start*/ 0xA960, 11 /* ALetter */],\n    [/*start*/ 0xA97D, 0 /* Other */],\n    [/*start*/ 0xA980, 14 /* Extend */],\n    [/*start*/ 0xA984, 11 /* ALetter */],\n    [/*start*/ 0xA9B3, 14 /* Extend */],\n    [/*start*/ 0xA9C1, 0 /* Other */],\n    [/*start*/ 0xA9CF, 11 /* ALetter */],\n    [/*start*/ 0xA9D0, 9 /* Numeric */],\n    [/*start*/ 0xA9DA, 0 /* Other */],\n    [/*start*/ 0xA9E5, 14 /* Extend */],\n    [/*start*/ 0xA9E6, 0 /* Other */],\n    [/*start*/ 0xA9F0, 9 /* Numeric */],\n    [/*start*/ 0xA9FA, 0 /* Other */],\n    [/*start*/ 0xAA00, 11 /* ALetter */],\n    [/*start*/ 0xAA29, 14 /* Extend */],\n    [/*start*/ 0xAA37, 0 /* Other */],\n    [/*start*/ 0xAA40, 11 /* ALetter */],\n    [/*start*/ 0xAA43, 14 /* Extend */],\n    [/*start*/ 0xAA44, 11 /* ALetter */],\n    [/*start*/ 0xAA4C, 14 /* Extend */],\n    [/*start*/ 0xAA4E, 0 /* Other */],\n    [/*start*/ 0xAA50, 9 /* Numeric */],\n    [/*start*/ 0xAA5A, 0 /* Other */],\n    [/*start*/ 0xAA7B, 14 /* Extend */],\n    [/*start*/ 0xAA7E, 0 /* Other */],\n    [/*start*/ 0xAAB0, 14 /* Extend */],\n    [/*start*/ 0xAAB1, 0 /* Other */],\n    [/*start*/ 0xAAB2, 14 /* Extend */],\n    [/*start*/ 0xAAB5, 0 /* Other */],\n    [/*start*/ 0xAAB7, 14 /* Extend */],\n    [/*start*/ 0xAAB9, 0 /* Other */],\n    [/*start*/ 0xAABE, 14 /* Extend */],\n    [/*start*/ 0xAAC0, 0 /* Other */],\n    [/*start*/ 0xAAC1, 14 /* Extend */],\n    [/*start*/ 0xAAC2, 0 /* Other */],\n    [/*start*/ 0xAAE0, 11 /* ALetter */],\n    [/*start*/ 0xAAEB, 14 /* Extend */],\n    [/*start*/ 0xAAF0, 0 /* Other */],\n    [/*start*/ 0xAAF2, 11 /* ALetter */],\n    [/*start*/ 0xAAF5, 14 /* Extend */],\n    [/*start*/ 0xAAF7, 0 /* Other */],\n    [/*start*/ 0xAB01, 11 /* ALetter */],\n    [/*start*/ 0xAB07, 0 /* Other */],\n    [/*start*/ 0xAB09, 11 /* ALetter */],\n    [/*start*/ 0xAB0F, 0 /* Other */],\n    [/*start*/ 0xAB11, 11 /* ALetter */],\n    [/*start*/ 0xAB17, 0 /* Other */],\n    [/*start*/ 0xAB20, 11 /* ALetter */],\n    [/*start*/ 0xAB27, 0 /* Other */],\n    [/*start*/ 0xAB28, 11 /* ALetter */],\n    [/*start*/ 0xAB2F, 0 /* Other */],\n    [/*start*/ 0xAB30, 11 /* ALetter */],\n    [/*start*/ 0xAB6A, 0 /* Other */],\n    [/*start*/ 0xAB70, 11 /* ALetter */],\n    [/*start*/ 0xABE3, 14 /* Extend */],\n    [/*start*/ 0xABEB, 0 /* Other */],\n    [/*start*/ 0xABEC, 14 /* Extend */],\n    [/*start*/ 0xABEE, 0 /* Other */],\n    [/*start*/ 0xABF0, 9 /* Numeric */],\n    [/*start*/ 0xABFA, 0 /* Other */],\n    [/*start*/ 0xAC00, 11 /* ALetter */],\n    [/*start*/ 0xD7A4, 0 /* Other */],\n    [/*start*/ 0xD7B0, 11 /* ALetter */],\n    [/*start*/ 0xD7C7, 0 /* Other */],\n    [/*start*/ 0xD7CB, 11 /* ALetter */],\n    [/*start*/ 0xD7FC, 0 /* Other */],\n    [/*start*/ 0xFB00, 11 /* ALetter */],\n    [/*start*/ 0xFB07, 0 /* Other */],\n    [/*start*/ 0xFB13, 11 /* ALetter */],\n    [/*start*/ 0xFB18, 0 /* Other */],\n    [/*start*/ 0xFB1D, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB1E, 14 /* Extend */],\n    [/*start*/ 0xFB1F, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB29, 0 /* Other */],\n    [/*start*/ 0xFB2A, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB37, 0 /* Other */],\n    [/*start*/ 0xFB38, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB3D, 0 /* Other */],\n    [/*start*/ 0xFB3E, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB3F, 0 /* Other */],\n    [/*start*/ 0xFB40, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB42, 0 /* Other */],\n    [/*start*/ 0xFB43, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB45, 0 /* Other */],\n    [/*start*/ 0xFB46, 15 /* Hebrew_Letter */],\n    [/*start*/ 0xFB50, 11 /* ALetter */],\n    [/*start*/ 0xFBB2, 0 /* Other */],\n    [/*start*/ 0xFBD3, 11 /* ALetter */],\n    [/*start*/ 0xFD3E, 0 /* Other */],\n    [/*start*/ 0xFD50, 11 /* ALetter */],\n    [/*start*/ 0xFD90, 0 /* Other */],\n    [/*start*/ 0xFD92, 11 /* ALetter */],\n    [/*start*/ 0xFDC8, 0 /* Other */],\n    [/*start*/ 0xFDF0, 11 /* ALetter */],\n    [/*start*/ 0xFDFC, 0 /* Other */],\n    [/*start*/ 0xFE00, 14 /* Extend */],\n    [/*start*/ 0xFE10, 7 /* MidNum */],\n    [/*start*/ 0xFE11, 0 /* Other */],\n    [/*start*/ 0xFE13, 10 /* MidLetter */],\n    [/*start*/ 0xFE14, 7 /* MidNum */],\n    [/*start*/ 0xFE15, 0 /* Other */],\n    [/*start*/ 0xFE20, 14 /* Extend */],\n    [/*start*/ 0xFE30, 0 /* Other */],\n    [/*start*/ 0xFE33, 12 /* ExtendNumLet */],\n    [/*start*/ 0xFE35, 0 /* Other */],\n    [/*start*/ 0xFE4D, 12 /* ExtendNumLet */],\n    [/*start*/ 0xFE50, 7 /* MidNum */],\n    [/*start*/ 0xFE51, 0 /* Other */],\n    [/*start*/ 0xFE52, 8 /* MidNumLet */],\n    [/*start*/ 0xFE53, 0 /* Other */],\n    [/*start*/ 0xFE54, 7 /* MidNum */],\n    [/*start*/ 0xFE55, 10 /* MidLetter */],\n    [/*start*/ 0xFE56, 0 /* Other */],\n    [/*start*/ 0xFE70, 11 /* ALetter */],\n    [/*start*/ 0xFE75, 0 /* Other */],\n    [/*start*/ 0xFE76, 11 /* ALetter */],\n    [/*start*/ 0xFEFD, 0 /* Other */],\n    [/*start*/ 0xFEFF, 13 /* Format */],\n    [/*start*/ 0xFF00, 0 /* Other */],\n    [/*start*/ 0xFF07, 8 /* MidNumLet */],\n    [/*start*/ 0xFF08, 0 /* Other */],\n    [/*start*/ 0xFF0C, 7 /* MidNum */],\n    [/*start*/ 0xFF0D, 0 /* Other */],\n    [/*start*/ 0xFF0E, 8 /* MidNumLet */],\n    [/*start*/ 0xFF0F, 0 /* Other */],\n    [/*start*/ 0xFF10, 9 /* Numeric */],\n    [/*start*/ 0xFF1A, 10 /* MidLetter */],\n    [/*start*/ 0xFF1B, 7 /* MidNum */],\n    [/*start*/ 0xFF1C, 0 /* Other */],\n    [/*start*/ 0xFF21, 11 /* ALetter */],\n    [/*start*/ 0xFF3B, 0 /* Other */],\n    [/*start*/ 0xFF3F, 12 /* ExtendNumLet */],\n    [/*start*/ 0xFF40, 0 /* Other */],\n    [/*start*/ 0xFF41, 11 /* ALetter */],\n    [/*start*/ 0xFF5B, 0 /* Other */],\n    [/*start*/ 0xFF66, 17 /* Katakana */],\n    [/*start*/ 0xFF9E, 14 /* Extend */],\n    [/*start*/ 0xFFA0, 11 /* ALetter */],\n    [/*start*/ 0xFFBF, 0 /* Other */],\n    [/*start*/ 0xFFC2, 11 /* ALetter */],\n    [/*start*/ 0xFFC8, 0 /* Other */],\n    [/*start*/ 0xFFCA, 11 /* ALetter */],\n    [/*start*/ 0xFFD0, 0 /* Other */],\n    [/*start*/ 0xFFD2, 11 /* ALetter */],\n    [/*start*/ 0xFFD8, 0 /* Other */],\n    [/*start*/ 0xFFDA, 11 /* ALetter */],\n    [/*start*/ 0xFFDD, 0 /* Other */],\n    [/*start*/ 0xFFF9, 13 /* Format */],\n    [/*start*/ 0xFFFC, 0 /* Other */],\n    [/*start*/ 0x10000, 11 /* ALetter */],\n    [/*start*/ 0x1000C, 0 /* Other */],\n    [/*start*/ 0x1000D, 11 /* ALetter */],\n    [/*start*/ 0x10027, 0 /* Other */],\n    [/*start*/ 0x10028, 11 /* ALetter */],\n    [/*start*/ 0x1003B, 0 /* Other */],\n    [/*start*/ 0x1003C, 11 /* ALetter */],\n    [/*start*/ 0x1003E, 0 /* Other */],\n    [/*start*/ 0x1003F, 11 /* ALetter */],\n    [/*start*/ 0x1004E, 0 /* Other */],\n    [/*start*/ 0x10050, 11 /* ALetter */],\n    [/*start*/ 0x1005E, 0 /* Other */],\n    [/*start*/ 0x10080, 11 /* ALetter */],\n    [/*start*/ 0x100FB, 0 /* Other */],\n    [/*start*/ 0x10140, 11 /* ALetter */],\n    [/*start*/ 0x10175, 0 /* Other */],\n    [/*start*/ 0x101FD, 14 /* Extend */],\n    [/*start*/ 0x101FE, 0 /* Other */],\n    [/*start*/ 0x10280, 11 /* ALetter */],\n    [/*start*/ 0x1029D, 0 /* Other */],\n    [/*start*/ 0x102A0, 11 /* ALetter */],\n    [/*start*/ 0x102D1, 0 /* Other */],\n    [/*start*/ 0x102E0, 14 /* Extend */],\n    [/*start*/ 0x102E1, 0 /* Other */],\n    [/*start*/ 0x10300, 11 /* ALetter */],\n    [/*start*/ 0x10320, 0 /* Other */],\n    [/*start*/ 0x1032D, 11 /* ALetter */],\n    [/*start*/ 0x1034B, 0 /* Other */],\n    [/*start*/ 0x10350, 11 /* ALetter */],\n    [/*start*/ 0x10376, 14 /* Extend */],\n    [/*start*/ 0x1037B, 0 /* Other */],\n    [/*start*/ 0x10380, 11 /* ALetter */],\n    [/*start*/ 0x1039E, 0 /* Other */],\n    [/*start*/ 0x103A0, 11 /* ALetter */],\n    [/*start*/ 0x103C4, 0 /* Other */],\n    [/*start*/ 0x103C8, 11 /* ALetter */],\n    [/*start*/ 0x103D0, 0 /* Other */],\n    [/*start*/ 0x103D1, 11 /* ALetter */],\n    [/*start*/ 0x103D6, 0 /* Other */],\n    [/*start*/ 0x10400, 11 /* ALetter */],\n    [/*start*/ 0x1049E, 0 /* Other */],\n    [/*start*/ 0x104A0, 9 /* Numeric */],\n    [/*start*/ 0x104AA, 0 /* Other */],\n    [/*start*/ 0x104B0, 11 /* ALetter */],\n    [/*start*/ 0x104D4, 0 /* Other */],\n    [/*start*/ 0x104D8, 11 /* ALetter */],\n    [/*start*/ 0x104FC, 0 /* Other */],\n    [/*start*/ 0x10500, 11 /* ALetter */],\n    [/*start*/ 0x10528, 0 /* Other */],\n    [/*start*/ 0x10530, 11 /* ALetter */],\n    [/*start*/ 0x10564, 0 /* Other */],\n    [/*start*/ 0x10600, 11 /* ALetter */],\n    [/*start*/ 0x10737, 0 /* Other */],\n    [/*start*/ 0x10740, 11 /* ALetter */],\n    [/*start*/ 0x10756, 0 /* Other */],\n    [/*start*/ 0x10760, 11 /* ALetter */],\n    [/*start*/ 0x10768, 0 /* Other */],\n    [/*start*/ 0x10800, 11 /* ALetter */],\n    [/*start*/ 0x10806, 0 /* Other */],\n    [/*start*/ 0x10808, 11 /* ALetter */],\n    [/*start*/ 0x10809, 0 /* Other */],\n    [/*start*/ 0x1080A, 11 /* ALetter */],\n    [/*start*/ 0x10836, 0 /* Other */],\n    [/*start*/ 0x10837, 11 /* ALetter */],\n    [/*start*/ 0x10839, 0 /* Other */],\n    [/*start*/ 0x1083C, 11 /* ALetter */],\n    [/*start*/ 0x1083D, 0 /* Other */],\n    [/*start*/ 0x1083F, 11 /* ALetter */],\n    [/*start*/ 0x10856, 0 /* Other */],\n    [/*start*/ 0x10860, 11 /* ALetter */],\n    [/*start*/ 0x10877, 0 /* Other */],\n    [/*start*/ 0x10880, 11 /* ALetter */],\n    [/*start*/ 0x1089F, 0 /* Other */],\n    [/*start*/ 0x108E0, 11 /* ALetter */],\n    [/*start*/ 0x108F3, 0 /* Other */],\n    [/*start*/ 0x108F4, 11 /* ALetter */],\n    [/*start*/ 0x108F6, 0 /* Other */],\n    [/*start*/ 0x10900, 11 /* ALetter */],\n    [/*start*/ 0x10916, 0 /* Other */],\n    [/*start*/ 0x10920, 11 /* ALetter */],\n    [/*start*/ 0x1093A, 0 /* Other */],\n    [/*start*/ 0x10980, 11 /* ALetter */],\n    [/*start*/ 0x109B8, 0 /* Other */],\n    [/*start*/ 0x109BE, 11 /* ALetter */],\n    [/*start*/ 0x109C0, 0 /* Other */],\n    [/*start*/ 0x10A00, 11 /* ALetter */],\n    [/*start*/ 0x10A01, 14 /* Extend */],\n    [/*start*/ 0x10A04, 0 /* Other */],\n    [/*start*/ 0x10A05, 14 /* Extend */],\n    [/*start*/ 0x10A07, 0 /* Other */],\n    [/*start*/ 0x10A0C, 14 /* Extend */],\n    [/*start*/ 0x10A10, 11 /* ALetter */],\n    [/*start*/ 0x10A14, 0 /* Other */],\n    [/*start*/ 0x10A15, 11 /* ALetter */],\n    [/*start*/ 0x10A18, 0 /* Other */],\n    [/*start*/ 0x10A19, 11 /* ALetter */],\n    [/*start*/ 0x10A36, 0 /* Other */],\n    [/*start*/ 0x10A38, 14 /* Extend */],\n    [/*start*/ 0x10A3B, 0 /* Other */],\n    [/*start*/ 0x10A3F, 14 /* Extend */],\n    [/*start*/ 0x10A40, 0 /* Other */],\n    [/*start*/ 0x10A60, 11 /* ALetter */],\n    [/*start*/ 0x10A7D, 0 /* Other */],\n    [/*start*/ 0x10A80, 11 /* ALetter */],\n    [/*start*/ 0x10A9D, 0 /* Other */],\n    [/*start*/ 0x10AC0, 11 /* ALetter */],\n    [/*start*/ 0x10AC8, 0 /* Other */],\n    [/*start*/ 0x10AC9, 11 /* ALetter */],\n    [/*start*/ 0x10AE5, 14 /* Extend */],\n    [/*start*/ 0x10AE7, 0 /* Other */],\n    [/*start*/ 0x10B00, 11 /* ALetter */],\n    [/*start*/ 0x10B36, 0 /* Other */],\n    [/*start*/ 0x10B40, 11 /* ALetter */],\n    [/*start*/ 0x10B56, 0 /* Other */],\n    [/*start*/ 0x10B60, 11 /* ALetter */],\n    [/*start*/ 0x10B73, 0 /* Other */],\n    [/*start*/ 0x10B80, 11 /* ALetter */],\n    [/*start*/ 0x10B92, 0 /* Other */],\n    [/*start*/ 0x10C00, 11 /* ALetter */],\n    [/*start*/ 0x10C49, 0 /* Other */],\n    [/*start*/ 0x10C80, 11 /* ALetter */],\n    [/*start*/ 0x10CB3, 0 /* Other */],\n    [/*start*/ 0x10CC0, 11 /* ALetter */],\n    [/*start*/ 0x10CF3, 0 /* Other */],\n    [/*start*/ 0x10D00, 11 /* ALetter */],\n    [/*start*/ 0x10D24, 14 /* Extend */],\n    [/*start*/ 0x10D28, 0 /* Other */],\n    [/*start*/ 0x10D30, 9 /* Numeric */],\n    [/*start*/ 0x10D3A, 0 /* Other */],\n    [/*start*/ 0x10E80, 11 /* ALetter */],\n    [/*start*/ 0x10EAA, 0 /* Other */],\n    [/*start*/ 0x10EAB, 14 /* Extend */],\n    [/*start*/ 0x10EAD, 0 /* Other */],\n    [/*start*/ 0x10EB0, 11 /* ALetter */],\n    [/*start*/ 0x10EB2, 0 /* Other */],\n    [/*start*/ 0x10F00, 11 /* ALetter */],\n    [/*start*/ 0x10F1D, 0 /* Other */],\n    [/*start*/ 0x10F27, 11 /* ALetter */],\n    [/*start*/ 0x10F28, 0 /* Other */],\n    [/*start*/ 0x10F30, 11 /* ALetter */],\n    [/*start*/ 0x10F46, 14 /* Extend */],\n    [/*start*/ 0x10F51, 0 /* Other */],\n    [/*start*/ 0x10FB0, 11 /* ALetter */],\n    [/*start*/ 0x10FC5, 0 /* Other */],\n    [/*start*/ 0x10FE0, 11 /* ALetter */],\n    [/*start*/ 0x10FF7, 0 /* Other */],\n    [/*start*/ 0x11000, 14 /* Extend */],\n    [/*start*/ 0x11003, 11 /* ALetter */],\n    [/*start*/ 0x11038, 14 /* Extend */],\n    [/*start*/ 0x11047, 0 /* Other */],\n    [/*start*/ 0x11066, 9 /* Numeric */],\n    [/*start*/ 0x11070, 0 /* Other */],\n    [/*start*/ 0x1107F, 14 /* Extend */],\n    [/*start*/ 0x11083, 11 /* ALetter */],\n    [/*start*/ 0x110B0, 14 /* Extend */],\n    [/*start*/ 0x110BB, 0 /* Other */],\n    [/*start*/ 0x110BD, 13 /* Format */],\n    [/*start*/ 0x110BE, 0 /* Other */],\n    [/*start*/ 0x110CD, 13 /* Format */],\n    [/*start*/ 0x110CE, 0 /* Other */],\n    [/*start*/ 0x110D0, 11 /* ALetter */],\n    [/*start*/ 0x110E9, 0 /* Other */],\n    [/*start*/ 0x110F0, 9 /* Numeric */],\n    [/*start*/ 0x110FA, 0 /* Other */],\n    [/*start*/ 0x11100, 14 /* Extend */],\n    [/*start*/ 0x11103, 11 /* ALetter */],\n    [/*start*/ 0x11127, 14 /* Extend */],\n    [/*start*/ 0x11135, 0 /* Other */],\n    [/*start*/ 0x11136, 9 /* Numeric */],\n    [/*start*/ 0x11140, 0 /* Other */],\n    [/*start*/ 0x11144, 11 /* ALetter */],\n    [/*start*/ 0x11145, 14 /* Extend */],\n    [/*start*/ 0x11147, 11 /* ALetter */],\n    [/*start*/ 0x11148, 0 /* Other */],\n    [/*start*/ 0x11150, 11 /* ALetter */],\n    [/*start*/ 0x11173, 14 /* Extend */],\n    [/*start*/ 0x11174, 0 /* Other */],\n    [/*start*/ 0x11176, 11 /* ALetter */],\n    [/*start*/ 0x11177, 0 /* Other */],\n    [/*start*/ 0x11180, 14 /* Extend */],\n    [/*start*/ 0x11183, 11 /* ALetter */],\n    [/*start*/ 0x111B3, 14 /* Extend */],\n    [/*start*/ 0x111C1, 11 /* ALetter */],\n    [/*start*/ 0x111C5, 0 /* Other */],\n    [/*start*/ 0x111C9, 14 /* Extend */],\n    [/*start*/ 0x111CD, 0 /* Other */],\n    [/*start*/ 0x111CE, 14 /* Extend */],\n    [/*start*/ 0x111D0, 9 /* Numeric */],\n    [/*start*/ 0x111DA, 11 /* ALetter */],\n    [/*start*/ 0x111DB, 0 /* Other */],\n    [/*start*/ 0x111DC, 11 /* ALetter */],\n    [/*start*/ 0x111DD, 0 /* Other */],\n    [/*start*/ 0x11200, 11 /* ALetter */],\n    [/*start*/ 0x11212, 0 /* Other */],\n    [/*start*/ 0x11213, 11 /* ALetter */],\n    [/*start*/ 0x1122C, 14 /* Extend */],\n    [/*start*/ 0x11238, 0 /* Other */],\n    [/*start*/ 0x1123E, 14 /* Extend */],\n    [/*start*/ 0x1123F, 0 /* Other */],\n    [/*start*/ 0x11280, 11 /* ALetter */],\n    [/*start*/ 0x11287, 0 /* Other */],\n    [/*start*/ 0x11288, 11 /* ALetter */],\n    [/*start*/ 0x11289, 0 /* Other */],\n    [/*start*/ 0x1128A, 11 /* ALetter */],\n    [/*start*/ 0x1128E, 0 /* Other */],\n    [/*start*/ 0x1128F, 11 /* ALetter */],\n    [/*start*/ 0x1129E, 0 /* Other */],\n    [/*start*/ 0x1129F, 11 /* ALetter */],\n    [/*start*/ 0x112A9, 0 /* Other */],\n    [/*start*/ 0x112B0, 11 /* ALetter */],\n    [/*start*/ 0x112DF, 14 /* Extend */],\n    [/*start*/ 0x112EB, 0 /* Other */],\n    [/*start*/ 0x112F0, 9 /* Numeric */],\n    [/*start*/ 0x112FA, 0 /* Other */],\n    [/*start*/ 0x11300, 14 /* Extend */],\n    [/*start*/ 0x11304, 0 /* Other */],\n    [/*start*/ 0x11305, 11 /* ALetter */],\n    [/*start*/ 0x1130D, 0 /* Other */],\n    [/*start*/ 0x1130F, 11 /* ALetter */],\n    [/*start*/ 0x11311, 0 /* Other */],\n    [/*start*/ 0x11313, 11 /* ALetter */],\n    [/*start*/ 0x11329, 0 /* Other */],\n    [/*start*/ 0x1132A, 11 /* ALetter */],\n    [/*start*/ 0x11331, 0 /* Other */],\n    [/*start*/ 0x11332, 11 /* ALetter */],\n    [/*start*/ 0x11334, 0 /* Other */],\n    [/*start*/ 0x11335, 11 /* ALetter */],\n    [/*start*/ 0x1133A, 0 /* Other */],\n    [/*start*/ 0x1133B, 14 /* Extend */],\n    [/*start*/ 0x1133D, 11 /* ALetter */],\n    [/*start*/ 0x1133E, 14 /* Extend */],\n    [/*start*/ 0x11345, 0 /* Other */],\n    [/*start*/ 0x11347, 14 /* Extend */],\n    [/*start*/ 0x11349, 0 /* Other */],\n    [/*start*/ 0x1134B, 14 /* Extend */],\n    [/*start*/ 0x1134E, 0 /* Other */],\n    [/*start*/ 0x11350, 11 /* ALetter */],\n    [/*start*/ 0x11351, 0 /* Other */],\n    [/*start*/ 0x11357, 14 /* Extend */],\n    [/*start*/ 0x11358, 0 /* Other */],\n    [/*start*/ 0x1135D, 11 /* ALetter */],\n    [/*start*/ 0x11362, 14 /* Extend */],\n    [/*start*/ 0x11364, 0 /* Other */],\n    [/*start*/ 0x11366, 14 /* Extend */],\n    [/*start*/ 0x1136D, 0 /* Other */],\n    [/*start*/ 0x11370, 14 /* Extend */],\n    [/*start*/ 0x11375, 0 /* Other */],\n    [/*start*/ 0x11400, 11 /* ALetter */],\n    [/*start*/ 0x11435, 14 /* Extend */],\n    [/*start*/ 0x11447, 11 /* ALetter */],\n    [/*start*/ 0x1144B, 0 /* Other */],\n    [/*start*/ 0x11450, 9 /* Numeric */],\n    [/*start*/ 0x1145A, 0 /* Other */],\n    [/*start*/ 0x1145E, 14 /* Extend */],\n    [/*start*/ 0x1145F, 11 /* ALetter */],\n    [/*start*/ 0x11462, 0 /* Other */],\n    [/*start*/ 0x11480, 11 /* ALetter */],\n    [/*start*/ 0x114B0, 14 /* Extend */],\n    [/*start*/ 0x114C4, 11 /* ALetter */],\n    [/*start*/ 0x114C6, 0 /* Other */],\n    [/*start*/ 0x114C7, 11 /* ALetter */],\n    [/*start*/ 0x114C8, 0 /* Other */],\n    [/*start*/ 0x114D0, 9 /* Numeric */],\n    [/*start*/ 0x114DA, 0 /* Other */],\n    [/*start*/ 0x11580, 11 /* ALetter */],\n    [/*start*/ 0x115AF, 14 /* Extend */],\n    [/*start*/ 0x115B6, 0 /* Other */],\n    [/*start*/ 0x115B8, 14 /* Extend */],\n    [/*start*/ 0x115C1, 0 /* Other */],\n    [/*start*/ 0x115D8, 11 /* ALetter */],\n    [/*start*/ 0x115DC, 14 /* Extend */],\n    [/*start*/ 0x115DE, 0 /* Other */],\n    [/*start*/ 0x11600, 11 /* ALetter */],\n    [/*start*/ 0x11630, 14 /* Extend */],\n    [/*start*/ 0x11641, 0 /* Other */],\n    [/*start*/ 0x11644, 11 /* ALetter */],\n    [/*start*/ 0x11645, 0 /* Other */],\n    [/*start*/ 0x11650, 9 /* Numeric */],\n    [/*start*/ 0x1165A, 0 /* Other */],\n    [/*start*/ 0x11680, 11 /* ALetter */],\n    [/*start*/ 0x116AB, 14 /* Extend */],\n    [/*start*/ 0x116B8, 11 /* ALetter */],\n    [/*start*/ 0x116B9, 0 /* Other */],\n    [/*start*/ 0x116C0, 9 /* Numeric */],\n    [/*start*/ 0x116CA, 0 /* Other */],\n    [/*start*/ 0x1171D, 14 /* Extend */],\n    [/*start*/ 0x1172C, 0 /* Other */],\n    [/*start*/ 0x11730, 9 /* Numeric */],\n    [/*start*/ 0x1173A, 0 /* Other */],\n    [/*start*/ 0x11800, 11 /* ALetter */],\n    [/*start*/ 0x1182C, 14 /* Extend */],\n    [/*start*/ 0x1183B, 0 /* Other */],\n    [/*start*/ 0x118A0, 11 /* ALetter */],\n    [/*start*/ 0x118E0, 9 /* Numeric */],\n    [/*start*/ 0x118EA, 0 /* Other */],\n    [/*start*/ 0x118FF, 11 /* ALetter */],\n    [/*start*/ 0x11907, 0 /* Other */],\n    [/*start*/ 0x11909, 11 /* ALetter */],\n    [/*start*/ 0x1190A, 0 /* Other */],\n    [/*start*/ 0x1190C, 11 /* ALetter */],\n    [/*start*/ 0x11914, 0 /* Other */],\n    [/*start*/ 0x11915, 11 /* ALetter */],\n    [/*start*/ 0x11917, 0 /* Other */],\n    [/*start*/ 0x11918, 11 /* ALetter */],\n    [/*start*/ 0x11930, 14 /* Extend */],\n    [/*start*/ 0x11936, 0 /* Other */],\n    [/*start*/ 0x11937, 14 /* Extend */],\n    [/*start*/ 0x11939, 0 /* Other */],\n    [/*start*/ 0x1193B, 14 /* Extend */],\n    [/*start*/ 0x1193F, 11 /* ALetter */],\n    [/*start*/ 0x11940, 14 /* Extend */],\n    [/*start*/ 0x11941, 11 /* ALetter */],\n    [/*start*/ 0x11942, 14 /* Extend */],\n    [/*start*/ 0x11944, 0 /* Other */],\n    [/*start*/ 0x11950, 9 /* Numeric */],\n    [/*start*/ 0x1195A, 0 /* Other */],\n    [/*start*/ 0x119A0, 11 /* ALetter */],\n    [/*start*/ 0x119A8, 0 /* Other */],\n    [/*start*/ 0x119AA, 11 /* ALetter */],\n    [/*start*/ 0x119D1, 14 /* Extend */],\n    [/*start*/ 0x119D8, 0 /* Other */],\n    [/*start*/ 0x119DA, 14 /* Extend */],\n    [/*start*/ 0x119E1, 11 /* ALetter */],\n    [/*start*/ 0x119E2, 0 /* Other */],\n    [/*start*/ 0x119E3, 11 /* ALetter */],\n    [/*start*/ 0x119E4, 14 /* Extend */],\n    [/*start*/ 0x119E5, 0 /* Other */],\n    [/*start*/ 0x11A00, 11 /* ALetter */],\n    [/*start*/ 0x11A01, 14 /* Extend */],\n    [/*start*/ 0x11A0B, 11 /* ALetter */],\n    [/*start*/ 0x11A33, 14 /* Extend */],\n    [/*start*/ 0x11A3A, 11 /* ALetter */],\n    [/*start*/ 0x11A3B, 14 /* Extend */],\n    [/*start*/ 0x11A3F, 0 /* Other */],\n    [/*start*/ 0x11A47, 14 /* Extend */],\n    [/*start*/ 0x11A48, 0 /* Other */],\n    [/*start*/ 0x11A50, 11 /* ALetter */],\n    [/*start*/ 0x11A51, 14 /* Extend */],\n    [/*start*/ 0x11A5C, 11 /* ALetter */],\n    [/*start*/ 0x11A8A, 14 /* Extend */],\n    [/*start*/ 0x11A9A, 0 /* Other */],\n    [/*start*/ 0x11A9D, 11 /* ALetter */],\n    [/*start*/ 0x11A9E, 0 /* Other */],\n    [/*start*/ 0x11AC0, 11 /* ALetter */],\n    [/*start*/ 0x11AF9, 0 /* Other */],\n    [/*start*/ 0x11C00, 11 /* ALetter */],\n    [/*start*/ 0x11C09, 0 /* Other */],\n    [/*start*/ 0x11C0A, 11 /* ALetter */],\n    [/*start*/ 0x11C2F, 14 /* Extend */],\n    [/*start*/ 0x11C37, 0 /* Other */],\n    [/*start*/ 0x11C38, 14 /* Extend */],\n    [/*start*/ 0x11C40, 11 /* ALetter */],\n    [/*start*/ 0x11C41, 0 /* Other */],\n    [/*start*/ 0x11C50, 9 /* Numeric */],\n    [/*start*/ 0x11C5A, 0 /* Other */],\n    [/*start*/ 0x11C72, 11 /* ALetter */],\n    [/*start*/ 0x11C90, 0 /* Other */],\n    [/*start*/ 0x11C92, 14 /* Extend */],\n    [/*start*/ 0x11CA8, 0 /* Other */],\n    [/*start*/ 0x11CA9, 14 /* Extend */],\n    [/*start*/ 0x11CB7, 0 /* Other */],\n    [/*start*/ 0x11D00, 11 /* ALetter */],\n    [/*start*/ 0x11D07, 0 /* Other */],\n    [/*start*/ 0x11D08, 11 /* ALetter */],\n    [/*start*/ 0x11D0A, 0 /* Other */],\n    [/*start*/ 0x11D0B, 11 /* ALetter */],\n    [/*start*/ 0x11D31, 14 /* Extend */],\n    [/*start*/ 0x11D37, 0 /* Other */],\n    [/*start*/ 0x11D3A, 14 /* Extend */],\n    [/*start*/ 0x11D3B, 0 /* Other */],\n    [/*start*/ 0x11D3C, 14 /* Extend */],\n    [/*start*/ 0x11D3E, 0 /* Other */],\n    [/*start*/ 0x11D3F, 14 /* Extend */],\n    [/*start*/ 0x11D46, 11 /* ALetter */],\n    [/*start*/ 0x11D47, 14 /* Extend */],\n    [/*start*/ 0x11D48, 0 /* Other */],\n    [/*start*/ 0x11D50, 9 /* Numeric */],\n    [/*start*/ 0x11D5A, 0 /* Other */],\n    [/*start*/ 0x11D60, 11 /* ALetter */],\n    [/*start*/ 0x11D66, 0 /* Other */],\n    [/*start*/ 0x11D67, 11 /* ALetter */],\n    [/*start*/ 0x11D69, 0 /* Other */],\n    [/*start*/ 0x11D6A, 11 /* ALetter */],\n    [/*start*/ 0x11D8A, 14 /* Extend */],\n    [/*start*/ 0x11D8F, 0 /* Other */],\n    [/*start*/ 0x11D90, 14 /* Extend */],\n    [/*start*/ 0x11D92, 0 /* Other */],\n    [/*start*/ 0x11D93, 14 /* Extend */],\n    [/*start*/ 0x11D98, 11 /* ALetter */],\n    [/*start*/ 0x11D99, 0 /* Other */],\n    [/*start*/ 0x11DA0, 9 /* Numeric */],\n    [/*start*/ 0x11DAA, 0 /* Other */],\n    [/*start*/ 0x11EE0, 11 /* ALetter */],\n    [/*start*/ 0x11EF3, 14 /* Extend */],\n    [/*start*/ 0x11EF7, 0 /* Other */],\n    [/*start*/ 0x11FB0, 11 /* ALetter */],\n    [/*start*/ 0x11FB1, 0 /* Other */],\n    [/*start*/ 0x12000, 11 /* ALetter */],\n    [/*start*/ 0x1239A, 0 /* Other */],\n    [/*start*/ 0x12400, 11 /* ALetter */],\n    [/*start*/ 0x1246F, 0 /* Other */],\n    [/*start*/ 0x12480, 11 /* ALetter */],\n    [/*start*/ 0x12544, 0 /* Other */],\n    [/*start*/ 0x13000, 11 /* ALetter */],\n    [/*start*/ 0x1342F, 0 /* Other */],\n    [/*start*/ 0x13430, 13 /* Format */],\n    [/*start*/ 0x13439, 0 /* Other */],\n    [/*start*/ 0x14400, 11 /* ALetter */],\n    [/*start*/ 0x14647, 0 /* Other */],\n    [/*start*/ 0x16800, 11 /* ALetter */],\n    [/*start*/ 0x16A39, 0 /* Other */],\n    [/*start*/ 0x16A40, 11 /* ALetter */],\n    [/*start*/ 0x16A5F, 0 /* Other */],\n    [/*start*/ 0x16A60, 9 /* Numeric */],\n    [/*start*/ 0x16A6A, 0 /* Other */],\n    [/*start*/ 0x16AD0, 11 /* ALetter */],\n    [/*start*/ 0x16AEE, 0 /* Other */],\n    [/*start*/ 0x16AF0, 14 /* Extend */],\n    [/*start*/ 0x16AF5, 0 /* Other */],\n    [/*start*/ 0x16B00, 11 /* ALetter */],\n    [/*start*/ 0x16B30, 14 /* Extend */],\n    [/*start*/ 0x16B37, 0 /* Other */],\n    [/*start*/ 0x16B40, 11 /* ALetter */],\n    [/*start*/ 0x16B44, 0 /* Other */],\n    [/*start*/ 0x16B50, 9 /* Numeric */],\n    [/*start*/ 0x16B5A, 0 /* Other */],\n    [/*start*/ 0x16B63, 11 /* ALetter */],\n    [/*start*/ 0x16B78, 0 /* Other */],\n    [/*start*/ 0x16B7D, 11 /* ALetter */],\n    [/*start*/ 0x16B90, 0 /* Other */],\n    [/*start*/ 0x16E40, 11 /* ALetter */],\n    [/*start*/ 0x16E80, 0 /* Other */],\n    [/*start*/ 0x16F00, 11 /* ALetter */],\n    [/*start*/ 0x16F4B, 0 /* Other */],\n    [/*start*/ 0x16F4F, 14 /* Extend */],\n    [/*start*/ 0x16F50, 11 /* ALetter */],\n    [/*start*/ 0x16F51, 14 /* Extend */],\n    [/*start*/ 0x16F88, 0 /* Other */],\n    [/*start*/ 0x16F8F, 14 /* Extend */],\n    [/*start*/ 0x16F93, 11 /* ALetter */],\n    [/*start*/ 0x16FA0, 0 /* Other */],\n    [/*start*/ 0x16FE0, 11 /* ALetter */],\n    [/*start*/ 0x16FE2, 0 /* Other */],\n    [/*start*/ 0x16FE3, 11 /* ALetter */],\n    [/*start*/ 0x16FE4, 14 /* Extend */],\n    [/*start*/ 0x16FE5, 0 /* Other */],\n    [/*start*/ 0x16FF0, 14 /* Extend */],\n    [/*start*/ 0x16FF2, 0 /* Other */],\n    [/*start*/ 0x1B000, 17 /* Katakana */],\n    [/*start*/ 0x1B001, 0 /* Other */],\n    [/*start*/ 0x1B164, 17 /* Katakana */],\n    [/*start*/ 0x1B168, 0 /* Other */],\n    [/*start*/ 0x1BC00, 11 /* ALetter */],\n    [/*start*/ 0x1BC6B, 0 /* Other */],\n    [/*start*/ 0x1BC70, 11 /* ALetter */],\n    [/*start*/ 0x1BC7D, 0 /* Other */],\n    [/*start*/ 0x1BC80, 11 /* ALetter */],\n    [/*start*/ 0x1BC89, 0 /* Other */],\n    [/*start*/ 0x1BC90, 11 /* ALetter */],\n    [/*start*/ 0x1BC9A, 0 /* Other */],\n    [/*start*/ 0x1BC9D, 14 /* Extend */],\n    [/*start*/ 0x1BC9F, 0 /* Other */],\n    [/*start*/ 0x1BCA0, 13 /* Format */],\n    [/*start*/ 0x1BCA4, 0 /* Other */],\n    [/*start*/ 0x1D165, 14 /* Extend */],\n    [/*start*/ 0x1D16A, 0 /* Other */],\n    [/*start*/ 0x1D16D, 14 /* Extend */],\n    [/*start*/ 0x1D173, 13 /* Format */],\n    [/*start*/ 0x1D17B, 14 /* Extend */],\n    [/*start*/ 0x1D183, 0 /* Other */],\n    [/*start*/ 0x1D185, 14 /* Extend */],\n    [/*start*/ 0x1D18C, 0 /* Other */],\n    [/*start*/ 0x1D1AA, 14 /* Extend */],\n    [/*start*/ 0x1D1AE, 0 /* Other */],\n    [/*start*/ 0x1D242, 14 /* Extend */],\n    [/*start*/ 0x1D245, 0 /* Other */],\n    [/*start*/ 0x1D400, 11 /* ALetter */],\n    [/*start*/ 0x1D455, 0 /* Other */],\n    [/*start*/ 0x1D456, 11 /* ALetter */],\n    [/*start*/ 0x1D49D, 0 /* Other */],\n    [/*start*/ 0x1D49E, 11 /* ALetter */],\n    [/*start*/ 0x1D4A0, 0 /* Other */],\n    [/*start*/ 0x1D4A2, 11 /* ALetter */],\n    [/*start*/ 0x1D4A3, 0 /* Other */],\n    [/*start*/ 0x1D4A5, 11 /* ALetter */],\n    [/*start*/ 0x1D4A7, 0 /* Other */],\n    [/*start*/ 0x1D4A9, 11 /* ALetter */],\n    [/*start*/ 0x1D4AD, 0 /* Other */],\n    [/*start*/ 0x1D4AE, 11 /* ALetter */],\n    [/*start*/ 0x1D4BA, 0 /* Other */],\n    [/*start*/ 0x1D4BB, 11 /* ALetter */],\n    [/*start*/ 0x1D4BC, 0 /* Other */],\n    [/*start*/ 0x1D4BD, 11 /* ALetter */],\n    [/*start*/ 0x1D4C4, 0 /* Other */],\n    [/*start*/ 0x1D4C5, 11 /* ALetter */],\n    [/*start*/ 0x1D506, 0 /* Other */],\n    [/*start*/ 0x1D507, 11 /* ALetter */],\n    [/*start*/ 0x1D50B, 0 /* Other */],\n    [/*start*/ 0x1D50D, 11 /* ALetter */],\n    [/*start*/ 0x1D515, 0 /* Other */],\n    [/*start*/ 0x1D516, 11 /* ALetter */],\n    [/*start*/ 0x1D51D, 0 /* Other */],\n    [/*start*/ 0x1D51E, 11 /* ALetter */],\n    [/*start*/ 0x1D53A, 0 /* Other */],\n    [/*start*/ 0x1D53B, 11 /* ALetter */],\n    [/*start*/ 0x1D53F, 0 /* Other */],\n    [/*start*/ 0x1D540, 11 /* ALetter */],\n    [/*start*/ 0x1D545, 0 /* Other */],\n    [/*start*/ 0x1D546, 11 /* ALetter */],\n    [/*start*/ 0x1D547, 0 /* Other */],\n    [/*start*/ 0x1D54A, 11 /* ALetter */],\n    [/*start*/ 0x1D551, 0 /* Other */],\n    [/*start*/ 0x1D552, 11 /* ALetter */],\n    [/*start*/ 0x1D6A6, 0 /* Other */],\n    [/*start*/ 0x1D6A8, 11 /* ALetter */],\n    [/*start*/ 0x1D6C1, 0 /* Other */],\n    [/*start*/ 0x1D6C2, 11 /* ALetter */],\n    [/*start*/ 0x1D6DB, 0 /* Other */],\n    [/*start*/ 0x1D6DC, 11 /* ALetter */],\n    [/*start*/ 0x1D6FB, 0 /* Other */],\n    [/*start*/ 0x1D6FC, 11 /* ALetter */],\n    [/*start*/ 0x1D715, 0 /* Other */],\n    [/*start*/ 0x1D716, 11 /* ALetter */],\n    [/*start*/ 0x1D735, 0 /* Other */],\n    [/*start*/ 0x1D736, 11 /* ALetter */],\n    [/*start*/ 0x1D74F, 0 /* Other */],\n    [/*start*/ 0x1D750, 11 /* ALetter */],\n    [/*start*/ 0x1D76F, 0 /* Other */],\n    [/*start*/ 0x1D770, 11 /* ALetter */],\n    [/*start*/ 0x1D789, 0 /* Other */],\n    [/*start*/ 0x1D78A, 11 /* ALetter */],\n    [/*start*/ 0x1D7A9, 0 /* Other */],\n    [/*start*/ 0x1D7AA, 11 /* ALetter */],\n    [/*start*/ 0x1D7C3, 0 /* Other */],\n    [/*start*/ 0x1D7C4, 11 /* ALetter */],\n    [/*start*/ 0x1D7CC, 0 /* Other */],\n    [/*start*/ 0x1D7CE, 9 /* Numeric */],\n    [/*start*/ 0x1D800, 0 /* Other */],\n    [/*start*/ 0x1DA00, 14 /* Extend */],\n    [/*start*/ 0x1DA37, 0 /* Other */],\n    [/*start*/ 0x1DA3B, 14 /* Extend */],\n    [/*start*/ 0x1DA6D, 0 /* Other */],\n    [/*start*/ 0x1DA75, 14 /* Extend */],\n    [/*start*/ 0x1DA76, 0 /* Other */],\n    [/*start*/ 0x1DA84, 14 /* Extend */],\n    [/*start*/ 0x1DA85, 0 /* Other */],\n    [/*start*/ 0x1DA9B, 14 /* Extend */],\n    [/*start*/ 0x1DAA0, 0 /* Other */],\n    [/*start*/ 0x1DAA1, 14 /* Extend */],\n    [/*start*/ 0x1DAB0, 0 /* Other */],\n    [/*start*/ 0x1E000, 14 /* Extend */],\n    [/*start*/ 0x1E007, 0 /* Other */],\n    [/*start*/ 0x1E008, 14 /* Extend */],\n    [/*start*/ 0x1E019, 0 /* Other */],\n    [/*start*/ 0x1E01B, 14 /* Extend */],\n    [/*start*/ 0x1E022, 0 /* Other */],\n    [/*start*/ 0x1E023, 14 /* Extend */],\n    [/*start*/ 0x1E025, 0 /* Other */],\n    [/*start*/ 0x1E026, 14 /* Extend */],\n    [/*start*/ 0x1E02B, 0 /* Other */],\n    [/*start*/ 0x1E100, 11 /* ALetter */],\n    [/*start*/ 0x1E12D, 0 /* Other */],\n    [/*start*/ 0x1E130, 14 /* Extend */],\n    [/*start*/ 0x1E137, 11 /* ALetter */],\n    [/*start*/ 0x1E13E, 0 /* Other */],\n    [/*start*/ 0x1E140, 9 /* Numeric */],\n    [/*start*/ 0x1E14A, 0 /* Other */],\n    [/*start*/ 0x1E14E, 11 /* ALetter */],\n    [/*start*/ 0x1E14F, 0 /* Other */],\n    [/*start*/ 0x1E2C0, 11 /* ALetter */],\n    [/*start*/ 0x1E2EC, 14 /* Extend */],\n    [/*start*/ 0x1E2F0, 9 /* Numeric */],\n    [/*start*/ 0x1E2FA, 0 /* Other */],\n    [/*start*/ 0x1E800, 11 /* ALetter */],\n    [/*start*/ 0x1E8C5, 0 /* Other */],\n    [/*start*/ 0x1E8D0, 14 /* Extend */],\n    [/*start*/ 0x1E8D7, 0 /* Other */],\n    [/*start*/ 0x1E900, 11 /* ALetter */],\n    [/*start*/ 0x1E944, 14 /* Extend */],\n    [/*start*/ 0x1E94B, 11 /* ALetter */],\n    [/*start*/ 0x1E94C, 0 /* Other */],\n    [/*start*/ 0x1E950, 9 /* Numeric */],\n    [/*start*/ 0x1E95A, 0 /* Other */],\n    [/*start*/ 0x1EE00, 11 /* ALetter */],\n    [/*start*/ 0x1EE04, 0 /* Other */],\n    [/*start*/ 0x1EE05, 11 /* ALetter */],\n    [/*start*/ 0x1EE20, 0 /* Other */],\n    [/*start*/ 0x1EE21, 11 /* ALetter */],\n    [/*start*/ 0x1EE23, 0 /* Other */],\n    [/*start*/ 0x1EE24, 11 /* ALetter */],\n    [/*start*/ 0x1EE25, 0 /* Other */],\n    [/*start*/ 0x1EE27, 11 /* ALetter */],\n    [/*start*/ 0x1EE28, 0 /* Other */],\n    [/*start*/ 0x1EE29, 11 /* ALetter */],\n    [/*start*/ 0x1EE33, 0 /* Other */],\n    [/*start*/ 0x1EE34, 11 /* ALetter */],\n    [/*start*/ 0x1EE38, 0 /* Other */],\n    [/*start*/ 0x1EE39, 11 /* ALetter */],\n    [/*start*/ 0x1EE3A, 0 /* Other */],\n    [/*start*/ 0x1EE3B, 11 /* ALetter */],\n    [/*start*/ 0x1EE3C, 0 /* Other */],\n    [/*start*/ 0x1EE42, 11 /* ALetter */],\n    [/*start*/ 0x1EE43, 0 /* Other */],\n    [/*start*/ 0x1EE47, 11 /* ALetter */],\n    [/*start*/ 0x1EE48, 0 /* Other */],\n    [/*start*/ 0x1EE49, 11 /* ALetter */],\n    [/*start*/ 0x1EE4A, 0 /* Other */],\n    [/*start*/ 0x1EE4B, 11 /* ALetter */],\n    [/*start*/ 0x1EE4C, 0 /* Other */],\n    [/*start*/ 0x1EE4D, 11 /* ALetter */],\n    [/*start*/ 0x1EE50, 0 /* Other */],\n    [/*start*/ 0x1EE51, 11 /* ALetter */],\n    [/*start*/ 0x1EE53, 0 /* Other */],\n    [/*start*/ 0x1EE54, 11 /* ALetter */],\n    [/*start*/ 0x1EE55, 0 /* Other */],\n    [/*start*/ 0x1EE57, 11 /* ALetter */],\n    [/*start*/ 0x1EE58, 0 /* Other */],\n    [/*start*/ 0x1EE59, 11 /* ALetter */],\n    [/*start*/ 0x1EE5A, 0 /* Other */],\n    [/*start*/ 0x1EE5B, 11 /* ALetter */],\n    [/*start*/ 0x1EE5C, 0 /* Other */],\n    [/*start*/ 0x1EE5D, 11 /* ALetter */],\n    [/*start*/ 0x1EE5E, 0 /* Other */],\n    [/*start*/ 0x1EE5F, 11 /* ALetter */],\n    [/*start*/ 0x1EE60, 0 /* Other */],\n    [/*start*/ 0x1EE61, 11 /* ALetter */],\n    [/*start*/ 0x1EE63, 0 /* Other */],\n    [/*start*/ 0x1EE64, 11 /* ALetter */],\n    [/*start*/ 0x1EE65, 0 /* Other */],\n    [/*start*/ 0x1EE67, 11 /* ALetter */],\n    [/*start*/ 0x1EE6B, 0 /* Other */],\n    [/*start*/ 0x1EE6C, 11 /* ALetter */],\n    [/*start*/ 0x1EE73, 0 /* Other */],\n    [/*start*/ 0x1EE74, 11 /* ALetter */],\n    [/*start*/ 0x1EE78, 0 /* Other */],\n    [/*start*/ 0x1EE79, 11 /* ALetter */],\n    [/*start*/ 0x1EE7D, 0 /* Other */],\n    [/*start*/ 0x1EE7E, 11 /* ALetter */],\n    [/*start*/ 0x1EE7F, 0 /* Other */],\n    [/*start*/ 0x1EE80, 11 /* ALetter */],\n    [/*start*/ 0x1EE8A, 0 /* Other */],\n    [/*start*/ 0x1EE8B, 11 /* ALetter */],\n    [/*start*/ 0x1EE9C, 0 /* Other */],\n    [/*start*/ 0x1EEA1, 11 /* ALetter */],\n    [/*start*/ 0x1EEA4, 0 /* Other */],\n    [/*start*/ 0x1EEA5, 11 /* ALetter */],\n    [/*start*/ 0x1EEAA, 0 /* Other */],\n    [/*start*/ 0x1EEAB, 11 /* ALetter */],\n    [/*start*/ 0x1EEBC, 0 /* Other */],\n    [/*start*/ 0x1F130, 11 /* ALetter */],\n    [/*start*/ 0x1F14A, 0 /* Other */],\n    [/*start*/ 0x1F150, 11 /* ALetter */],\n    [/*start*/ 0x1F16A, 0 /* Other */],\n    [/*start*/ 0x1F170, 11 /* ALetter */],\n    [/*start*/ 0x1F18A, 0 /* Other */],\n    [/*start*/ 0x1F1E6, 18 /* Regional_Indicator */],\n    [/*start*/ 0x1F200, 0 /* Other */],\n    [/*start*/ 0x1F3FB, 14 /* Extend */],\n    [/*start*/ 0x1F400, 0 /* Other */],\n    [/*start*/ 0x1FBF0, 9 /* Numeric */],\n    [/*start*/ 0x1FBFA, 0 /* Other */],\n    [/*start*/ 0xE0001, 13 /* Format */],\n    [/*start*/ 0xE0002, 0 /* Other */],\n    [/*start*/ 0xE0020, 14 /* Extend */],\n    [/*start*/ 0xE0080, 0 /* Other */],\n    [/*start*/ 0xE0100, 14 /* Extend */],\n    [/*start*/ 0xE01F0, 0 /* Other */],\n];\n","\"use strict\";\n/*!\n * Copyright (c) 2019 Eddie Antonio Santos\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @file\n * This implements the Unicode 12.0 UAX #29 §4.1\n * default word boundary specification.\n *\n * It finds boundaries between words and also other things!\n *\n * See: https://unicode.org/reports/tr29/#Default_Word_Boundaries\n */\nconst WordBreakProperty_1 = require(\"./gen/WordBreakProperty\");\n/**\n * Yields a series of string indices where a word break should\n * occur. That is, there should be a break BEFORE each string\n * index yielded by this generator.\n *\n * @param text Text to find word boundaries in.\n */\nfunction* findBoundaries(text) {\n    // WB1 and WB2: no boundaries if given an empty string.\n    if (text.length === 0) {\n        // There are no boundaries in an empty string!\n        return;\n    }\n    // This algorithm works by maintaining a sliding window of four SCALAR VALUES.\n    //\n    //  - Scalar values? JavaScript strings are NOT actually a string of\n    //    Unicode code points; some characters are made up of TWO\n    //    JavaScript indices. e.g.,\n    //        \"💩\".length === 2;\n    //        \"💩\"[0] === '\\uD83D';\n    //        \"💩\"[1] === '\\uDCA9';\n    //\n    //    These characters that are represented by TWO indices are\n    //    called \"surrogate pairs\". Since we don't want to be in the\n    //    \"middle\" of a character, make sure we're always advancing\n    //    by scalar values, and NOT indices. That means, we sometimes\n    //    need to advance by TWO indices, not just one.\n    //  - Four values? Some rules look at what's to the left of\n    //    left, and some look at what's to the right of right. So\n    //    keep track of this!\n    let rightPos;\n    let lookaheadPos = 0; // lookahead, one scalar value to the right of right.\n    // Before the start of the string is also the start of the string.\n    let lookbehind;\n    let left = 19 /* sot */;\n    let right = 19 /* sot */;\n    let lookahead = wordbreakPropertyAt(0);\n    // Count RIs to make sure we're not splitting emoji flags:\n    let nConsecutiveRegionalIndicators = 0;\n    do {\n        // Shift all positions, one scalar value to the right.\n        rightPos = lookaheadPos;\n        lookaheadPos = positionAfter(lookaheadPos);\n        // Shift all properties, one scalar value to the right.\n        [lookbehind, left, right, lookahead] =\n            [left, right, lookahead, wordbreakPropertyAt(lookaheadPos)];\n        // Break at the start and end of text, unless the text is empty.\n        // WB1: Break at start of text...\n        if (left === 19 /* sot */) {\n            yield rightPos;\n            continue;\n        }\n        // WB2: Break at the end of text...\n        if (right === 20 /* eot */) {\n            void 0;\n            yield rightPos;\n            break; // Reached the end of the string. We're done!\n        }\n        // WB3: Do not break within CRLF:\n        if (left === 3 /* CR */ && right === 1 /* LF */)\n            continue;\n        // WB3b: Otherwise, break after...\n        if (left === 2 /* Newline */ ||\n            left == 3 /* CR */ ||\n            left === 1 /* LF */) {\n            yield rightPos;\n            continue;\n        }\n        // WB3a: ...and before newlines\n        if (right === 2 /* Newline */ ||\n            right === 3 /* CR */ ||\n            right === 1 /* LF */) {\n            yield rightPos;\n            continue;\n        }\n        // HACK: advance by TWO positions to handle tricky emoji\n        // combining sequences, that SHOULD be kept together by\n        // WB3c, but are prematurely split by WB4:\n        if (left === 0 /* Other */ &&\n            (right === 14 /* Extend */ || right === 13 /* Format */) &&\n            lookahead === 16 /* ZWJ */) {\n            // To ensure this is not split, advance TWO positions forward.\n            for (let i = 0; i < 2; i++) {\n                [rightPos, lookaheadPos] = [lookaheadPos, positionAfter(lookaheadPos)];\n            }\n            [left, right, lookahead] =\n                [lookahead, wordbreakPropertyAt(rightPos), wordbreakPropertyAt(lookaheadPos)];\n            // N.B. `left` now MUST be ZWJ, setting it up for WB3c proper.\n        }\n        // WB3c: Do not break within emoji ZWJ sequences.\n        if (left === 16 /* ZWJ */ && isExtendedPictographicAt(rightPos))\n            continue;\n        // WB3d: Keep horizontal whitespace together\n        if (left === 4 /* WSegSpace */ && right == 4 /* WSegSpace */)\n            continue;\n        // WB4: Ignore format and extend characters\n        // This is to keep grapheme clusters together!\n        // See: Section 6.2: https://unicode.org/reports/tr29/#Grapheme_Cluster_and_Format_Rules\n        // N.B.: The rule about \"except after sot, CR, LF, and\n        // Newline\" already been by WB1, WB2, WB3a, and WB3b above.\n        while (right === 13 /* Format */ ||\n            right === 14 /* Extend */ ||\n            right === 16 /* ZWJ */) {\n            // Continue advancing in the string, as if these\n            // characters do not exist. DO NOT update left and\n            // lookbehind however!\n            [rightPos, lookaheadPos] = [lookaheadPos, positionAfter(lookaheadPos)];\n            [right, lookahead] = [lookahead, wordbreakPropertyAt(lookaheadPos)];\n        }\n        // In ignoring the characters in the previous loop, we could\n        // have fallen off the end of the string, so end the loop\n        // prematurely if that happens!\n        if (right === 20 /* eot */) {\n            void 0;\n            yield rightPos;\n            break;\n        }\n        // WB4 (continued): Lookahead must ALSO ignore these format,\n        // extend, ZWJ characters!\n        while (lookahead === 13 /* Format */ ||\n            lookahead === 14 /* Extend */ ||\n            lookahead === 16 /* ZWJ */) {\n            // Continue advancing in the string, as if these\n            // characters do not exist. DO NOT update left and right,\n            // however!\n            lookaheadPos = positionAfter(lookaheadPos);\n            lookahead = wordbreakPropertyAt(lookaheadPos);\n        }\n        // WB5: Do not break between most letters.\n        if (isAHLetter(left) && isAHLetter(right))\n            continue;\n        // Do not break across certain punctuation\n        // WB6: (Don't break before apostrophes in contractions)\n        if (isAHLetter(left) && isAHLetter(lookahead) &&\n            (right === 10 /* MidLetter */ || isMidNumLetQ(right)))\n            continue;\n        // WB7: (Don't break after apostrophes in contractions)\n        if (isAHLetter(lookbehind) && isAHLetter(right) &&\n            (left === 10 /* MidLetter */ || isMidNumLetQ(left)))\n            continue;\n        // WB7a\n        if (left === 15 /* Hebrew_Letter */ && right === 6 /* Single_Quote */)\n            continue;\n        // WB7b\n        if (left === 15 /* Hebrew_Letter */ && right === 5 /* Double_Quote */ &&\n            lookahead === 15 /* Hebrew_Letter */)\n            continue;\n        // WB7c\n        if (lookbehind === 15 /* Hebrew_Letter */ && left === 5 /* Double_Quote */ &&\n            right === 15 /* Hebrew_Letter */)\n            continue;\n        // Do not break within sequences of digits, or digits adjacent to letters.\n        // e.g., \"3a\" or \"A3\"\n        // WB8\n        if (left === 9 /* Numeric */ && right === 9 /* Numeric */)\n            continue;\n        // WB9\n        if (isAHLetter(left) && right === 9 /* Numeric */)\n            continue;\n        // WB10\n        if (left === 9 /* Numeric */ && isAHLetter(right))\n            continue;\n        // Do not break within sequences, such as 3.2, 3,456.789\n        // WB11\n        if (lookbehind === 9 /* Numeric */ && right === 9 /* Numeric */ &&\n            (left === 7 /* MidNum */ || isMidNumLetQ(left)))\n            continue;\n        // WB12\n        if (left === 9 /* Numeric */ && lookahead === 9 /* Numeric */ &&\n            (right === 7 /* MidNum */ || isMidNumLetQ(right)))\n            continue;\n        // WB13: Do not break between Katakana\n        if (left === 17 /* Katakana */ && right === 17 /* Katakana */)\n            continue;\n        // Do not break from extenders (e.g., U+202F NARROW NO-BREAK SPACE)\n        // WB13a\n        if ((isAHLetter(left) ||\n            left === 9 /* Numeric */ ||\n            left === 17 /* Katakana */ ||\n            left === 12 /* ExtendNumLet */) &&\n            right === 12 /* ExtendNumLet */)\n            continue;\n        // WB13b\n        if ((isAHLetter(right) ||\n            right === 9 /* Numeric */ ||\n            right === 17 /* Katakana */) && left === 12 /* ExtendNumLet */)\n            continue;\n        // WB15 & WB16:\n        // Do not break within emoji flag sequences. That is, do not break between\n        // regional indicator (RI) symbols if there is an odd number of RI\n        // characters before the break point.\n        if (right === 18 /* Regional_Indicator */) {\n            // Emoji flags are actually composed of TWO scalar values, each being a\n            // \"regional indicator\". These indicators correspond to Latin letters. Put\n            // two of them together, and they spell out an ISO 3166-1-alpha-2 country\n            // code. Since these always come in pairs, NEVER split the pairs! So, if\n            // we happen to be inside the middle of an odd numbered of\n            // Regional_Indicators, DON'T SPLIT IT!\n            nConsecutiveRegionalIndicators += 1;\n            if ((nConsecutiveRegionalIndicators % 2) == 1) {\n                continue;\n            }\n        }\n        else {\n            nConsecutiveRegionalIndicators = 0;\n        }\n        // WB999: Otherwise, break EVERYWHERE (including around ideographs)\n        yield rightPos;\n    } while (rightPos < text.length);\n    ///// Internal utility functions /////\n    /**\n     * Returns the position of the start of the next scalar value. This jumps\n     * over surrogate pairs.\n     *\n     * If asked for the character AFTER the end of the string, this always\n     * returns the length of the string.\n     */\n    function positionAfter(pos) {\n        if (pos >= text.length) {\n            return text.length;\n        }\n        else if (isStartOfSurrogatePair(text[pos])) {\n            return pos + 2;\n        }\n        return pos + 1;\n    }\n    /**\n     * Return the value of the Word_Break property at the given string index.\n     * @param pos position in the text.\n     */\n    function wordbreakPropertyAt(pos) {\n        if (pos < 0) {\n            return 19 /* sot */; // Always \"start of string\" before the string starts!\n        }\n        else if (pos >= text.length) {\n            return 20 /* eot */; // Always \"end of string\" after the string ends!\n        }\n        else if (isStartOfSurrogatePair(text[pos])) {\n            // Surrogate pairs the next TWO items from the string!\n            return property(text[pos] + text[pos + 1]);\n        }\n        return property(text[pos]);\n    }\n    function isExtendedPictographicAt(pos) {\n        return WordBreakProperty_1.extendedPictographic.test(text.substring(pos, pos + 2));\n    }\n    // Word_Break rule macros\n    // See: https://unicode.org/reports/tr29/#WB_Rule_Macros\n    function isAHLetter(prop) {\n        return prop === 11 /* ALetter */ ||\n            prop === 15 /* Hebrew_Letter */;\n    }\n    function isMidNumLetQ(prop) {\n        return prop === 8 /* MidNumLet */ ||\n            prop === 6 /* Single_Quote */;\n    }\n}\nexports.findBoundaries = findBoundaries;\nfunction isStartOfSurrogatePair(character) {\n    let codeUnit = character.charCodeAt(0);\n    return codeUnit >= 0xD800 && codeUnit <= 0xDBFF;\n}\n/**\n * Return the Word_Break property value for a character.\n * Note that\n * @param character a scalar value\n */\nfunction property(character) {\n    // This MUST be a scalar value.\n    void 0;\n    // TODO: remove dependence on character.codepointAt()?\n    let codepoint = character.codePointAt(0);\n    return searchForProperty(codepoint, 0, WordBreakProperty_1.WORD_BREAK_PROPERTY.length - 1);\n}\nexports.property = property;\n/**\n * Binary search for the word break property of a given CODE POINT.\n */\nfunction searchForProperty(codePoint, left, right) {\n    // All items that are not found in the array are assigned the 'Other' property.\n    if (right < left) {\n        return 0 /* Other */;\n    }\n    let midpoint = left + ~~((right - left) / 2);\n    let candidate = WordBreakProperty_1.WORD_BREAK_PROPERTY[midpoint];\n    let nextRange = WordBreakProperty_1.WORD_BREAK_PROPERTY[midpoint + 1];\n    let startOfNextRange = nextRange ? nextRange[0 /* Start */] : Infinity;\n    if (codePoint < candidate[0 /* Start */]) {\n        return searchForProperty(codePoint, left, midpoint - 1);\n    }\n    else if (codePoint >= startOfNextRange) {\n        return searchForProperty(codePoint, midpoint + 1, right);\n    }\n    // We found it!\n    void 0;\n    void 0;\n    return candidate[1 /* Value */];\n}\n","\"use strict\";\n/*!\n * Copyright (c) 2019 Eddie Antonio Santos\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// See: https://unicode.org/reports/tr29/#Default_Word_Boundaries\nconst findBoundaries_1 = require(\"./findBoundaries\");\n/**\n * Splits text by its word breaks. Any spans that are composed entirely of\n * whitespace will not be returned. Returns an array of strings.\n *\n * @param text Any valid USVString with words to split.\n */\nfunction split(text) {\n    let spans = Array.from(findSpans(text));\n    return spans.map(span => span.text).filter(isNonSpace);\n}\nexports.split = split;\n/**\n * Generator that yields every successive span from the the text.\n * @param text Any valid USVString to segment.\n */\nfunction* findSpans(text) {\n    // TODO: don't throw the boundaries into an array.\n    let boundaries = Array.from(findBoundaries_1.findBoundaries(text));\n    if (boundaries.length == 0) {\n        return;\n    }\n    // All non-empty strings have at least TWO boundaries at the start and end of\n    // the string.\n    void 0;\n    for (let i = 0; i < boundaries.length - 1; i++) {\n        let start = boundaries[i];\n        let end = boundaries[i + 1];\n        yield new LazySpan(text, start, end);\n    }\n}\nexports.findSpans = findSpans;\n/**\n * A span that does not cut out the substring until it absolutely has to!\n */\nclass LazySpan {\n    constructor(source, start, end) {\n        this._source = source;\n        this.start = start;\n        this.end = end;\n    }\n    get text() {\n        return this._source.substring(this.start, this.end);\n    }\n    get length() {\n        return this.end - this.start;\n    }\n}\n/**\n * Returns true when the chunk does not solely consiste of whitespace.\n *\n * @param chunk a chunk of text. Starts and ends at word boundaries.\n */\nfunction isNonSpace(chunk) {\n    return !Array.from(chunk).map(findBoundaries_1.property).every(wb => (wb === 3 /* CR */ ||\n        wb === 1 /* LF */ ||\n        wb === 2 /* Newline */ ||\n        wb === 4 /* WSegSpace */));\n}\n","/**\n * A regular expression string matching digits\n *\n * @type {string}\n * @ignore\n */\nexport const digit = \"\\\\d\";\n\n/**\n * A regular expression string matching whitespace\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const.js}\n *\n * @type {string}\n * @ignore\n */\nexport const whitespace = \"\\\\s\\\\uFEFF\\\\xA0\";\n\n/**\n * A regular expression string matching diacritical mark\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const.js}\n *\n * @type {string}\n * @ignore\n */\nexport const diacriticalMark =\n  \"\\\\u0300-\\\\u036F\\\\u1AB0-\\\\u1AFF\\\\u1DC0-\\\\u1DFF\\\\u20D0-\\\\u20FF\\\\uFE20-\\\\uFE2F\";\n\n/**\n * A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js}\n *\n * @type {string}\n * @ignore\n */\nconst nonCharacter = \"\\\\x00-\\\\x2F\\\\x3A-\\\\x40\\\\x5B-\\\\x60\\\\x7b-\\\\xBF\\\\xD7\\\\xF7\";\n\n/**\n * A regular expression to match the dingbat Unicode block\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js}\n *\n * @type {string}\n * @ignore\n */\nconst dingbatBlock = \"\\\\u2700-\\\\u27BF\";\n\n/**\n * A regular expression string that matches lower case letters: LATIN\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js}\n *\n * @type {string}\n * @ignore\n */\nconst lowerCaseLetter =\n  \"a-z\\\\xB5\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F\";\n\n/**\n * A regular expression string that matches upper case letters: LATIN\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js}\n *\n * @type {string}\n * @ignore\n */\nconst upperCaseLetter =\n  \"\\\\x41-\\\\x5a\\\\xc0-\\\\xd6\\\\xd8-\\\\xde\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010a\\\\u010c\\\\u010e\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011a\\\\u011c\\\\u011e\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012a\\\\u012c\\\\u012e\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013b\\\\u013d\\\\u013f\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014a\\\\u014c\\\\u014e\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015a\\\\u015c\\\\u015e\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016a\\\\u016c\\\\u016e\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017b\\\\u017d\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018b\\\\u018e-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019c\\\\u019d\\\\u019f\\\\u01a0\\\\u01a2\\\\u01a4\\\\u01a6\\\\u01a7\\\\u01a9\\\\u01ac\\\\u01ae\\\\u01af\\\\u01b1-\\\\u01b3\\\\u01b5\\\\u01b7\\\\u01b8\\\\u01bc\\\\u01c4\\\\u01c5\\\\u01c7\\\\u01c8\\\\u01ca\\\\u01cb\\\\u01cd\\\\u01cf\\\\u01d1\\\\u01d3\\\\u01d5\\\\u01d7\\\\u01d9\\\\u01db\\\\u01de\\\\u01e0\\\\u01e2\\\\u01e4\\\\u01e6\\\\u01e8\\\\u01ea\\\\u01ec\\\\u01ee\\\\u01f1\\\\u01f2\\\\u01f4\\\\u01f6-\\\\u01f8\\\\u01fa\\\\u01fc\\\\u01fe\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020a\\\\u020c\\\\u020e\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021a\\\\u021c\\\\u021e\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022a\\\\u022c\\\\u022e\\\\u0230\\\\u0232\\\\u023a\\\\u023b\\\\u023d\\\\u023e\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024a\\\\u024c\\\\u024e\";\n\n/**\n * Matches ASCII punctuation marks\n *\n * @type {string}\n * @ignore\n */\nconst asciiPunctuation =\n  \"\\\\u0021-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u0060\\\\u007B-\\\\u007E\";\n\n/**\n * Matches punctuation marks in Unicode Block \"Latin-1 Supplement\"\n *\n * @type {string}\n * @ignore\n */\nconst latin1SupplementPunctuation =\n  \"\\\\u00A1-\\\\u00B1\\\\u00B4-\\\\u00B8\\\\u00BA\\\\u00BB\\\\u00BF\\\\u00D7\\\\u00F7\";\n\n/**\n * Matches the Unicode General Punctuation Block\n *\n * @type {string}\n * @ignore\n */\nconst generalPunctuationBlock = \"\\\\u2000-\\\\u206F\";\n\n/**\n * Matches the Unicode Supplemental Punctuation Block\n *\n * @type {string}\n * @ignore\n */\nconst supplementalPunctuationBlock = \"\\\\u2E00-\\\\u2E7F\";\n\n/**\n * Regular expression to match whitespace and separator chars that should be trimmed\n *\n * @type {string}\n * @ignore\n */\nexport const TRIM_CHARS =\n  \"\\\\u0009\\\\u000A\\\\u000B\\\\u000C\\\\u000D\\\\u0020\\\\u00A0\\\\u1680\\\\u180E\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200A\\\\u200B\\\\u202F\\\\u205F\\\\u2028\\\\u2029\\\\u3000\\\\uFEFF\";\n\n/**\n * Regular expression to match punctuation\n *\n * Note that there are still several obscure punctuation marks in other\n * blocks this RegExp will not catch. If we encounter enough of those\n * edge cases, I'll try and add at least some of them to this list.\n *\n * @type {RegExp}\n * @ignore\n */\nexport const REGEXP_PUNCTUATION = new RegExp(\n  `[${asciiPunctuation}${latin1SupplementPunctuation}${generalPunctuationBlock}${supplementalPunctuationBlock}]`,\n  \"g\"\n);\n\n/**\n * Regular expression to match when EVERY char in string is punctuation\n *\n * @type {RegExp}\n * @ignore\n */\nexport const IS_PUNCTUATION = new RegExp(\n  `^([${asciiPunctuation}${latin1SupplementPunctuation}${generalPunctuationBlock}${supplementalPunctuationBlock}])+$`\n);\n\n/**\n * Regular expression to match Extended ASCII characters, i.e. the first 255\n * From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js}\n * I've added the punctuation in so it doesn't use REGEX_WORD when the only non-passing chars are punctuation.\n *\n * @type {RegExp}\n * @ignore\n */\nexport const REGEXP_EXTENDED_ASCII = /^[\\x01-\\xFF\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E\\u00A1-\\u00B1\\u00B4-\\u00B8\\u00BA\\u00BB\\u00BF\\u00D7\\u00F7\\u2000-\\u206F\\u2E00-\\u2E7F]*$/;\n\n/**\n * Regular expression to match words from Basic Latin and Latin-1 Supplement blocks\n * See {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js}, but\n * my version keeps punctuation as this will only be used after a string has already been split\n * at its UAX #29 word boundaries. That keeps it from splitting contractions like Voca does.\n *\n * @type {RegExp}\n * @ignore\n */\nexport const REGEXP_LATIN_WORD = /([A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+)([\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E\\u00A1-\\u00B1\\u00B4-\\u00B8\\u00BA\\u00BB\\u00BF\\u00D7\\u00F7\\u2000-\\u206F\\u2E00-\\u2E7F]([a-z\\xDF-\\xF6\\xF8-\\xFF]*[A-Z\\xC0-\\xD6\\xD8-\\xDE]*\\d*)*)*/g;\n\n/**\n * Regular expression to match Unicode words with characters outside the Basic\n * Latin and Latin-1 Supplement blocks. From {@link https://github.com/panzerdp/voca/blob/master/src/helper/reg_exp/const_extended.js} with slight changes\n *\n * TODO: Fix this so it doesn't strip punctuation since this is only being used after string is already UAX #29 split\n *\n * @type {RegExp}\n * @ignore\n */\nexport const REGEXP_WORD = new RegExp(\n  \"(?:[\" +\n    upperCaseLetter +\n    \"][\" +\n    diacriticalMark +\n    \"]*)?(?:[\" +\n    lowerCaseLetter +\n    \"][\" +\n    diacriticalMark +\n    \"]*)+|\\\n    (?:[\" +\n    upperCaseLetter +\n    \"][\" +\n    diacriticalMark +\n    \"]*)+(?![\" +\n    lowerCaseLetter +\n    \"])|\\\n    [\" +\n    digit +\n    \"]+|\\\n    [\" +\n    dingbatBlock +\n    \"]|\\\n    [\" +\n    nonCharacter +\n    generalPunctuationBlock +\n    supplementalPunctuationBlock +\n    whitespace +\n    \"]+\",\n  \"g\"\n);\n","import { split } from \"unicode-default-word-boundary\";\nimport helpers from \"@nyxlang/helpers\";\nimport {\n  IS_PUNCTUATION,\n  REGEXP_EXTENDED_ASCII,\n  REGEXP_LATIN_WORD,\n  REGEXP_WORD,\n} from \"../helpers/regexp.js\";\n\nconst { coerceToString, isNil, isRegExp, nilDefault } = helpers;\n\n/**\n * Splits a string into words using {@link http://www.unicode.org/reports/tr29/ Unicode UAX #29} and strips punctuation\n *\n * @function words\n * @static\n * @since 0.01\n * @memberof Split\n * @param {string} subject String to split into words\n * @returns {string[]} An array of words\n * @example\n * su.words(\"This is a string\")\n * // => [\"This\", \"is\", \"a\", \"string\"]\n * su.words(\"The quick (“brown”) fox can’t jump 32.3 feet, right?\")\n * // => [\"The\", \"quick\", \"brown\", \"fox\", \"can’t\", \"jump\", \"32.3\", \"feet\", \"right\"]\n * su.words(\"В чащах юга жил бы цитрус? Да, но фальшивый экземпляр!\")\n * // => [\"В\", \"чащах\", \"юга\", \"жил\", \"бы\", \"цитрус\", \"Да\", \"но\", \"фальшивый\", \"экземпляр\"]\n * su.words(\"thisIsAStringToSplit\")\n * // => [\"this\", \"Is\", \"A\", \"String\", \"To\", \"Split\"]\n */\nfunction words(subject, pattern, flags) {\n  subject = coerceToString(subject);\n  const sansUnderscores = subject.replace(/_/g, \" \");\n  let regexp;\n  if (isNil(pattern)) {\n    let ws = split(sansUnderscores).filter(\n      (word) => !IS_PUNCTUATION.test(word)\n    );\n    ws = ws.map((w) => {\n      regexp = REGEXP_EXTENDED_ASCII.test(w) ? REGEXP_LATIN_WORD : REGEXP_WORD;\n      if (regexp.test(w)) {\n        return [...w.match(regexp)];\n      }\n      return w;\n    });\n    ws = ws.reduce((acc, w) => {\n      if (Array.isArray(w)) {\n        w.forEach((word) => acc.push(word));\n        return acc;\n      }\n      return [...acc, w];\n    }, []);\n    return ws;\n  } else if (isRegExp(pattern)) {\n    regexp = pattern;\n  } else {\n    const flagString = coerceToString(nilDefault(flags, \"\"));\n    regexp = new RegExp(coerceToString(pattern), flagString);\n  }\n  return nilDefault(w.match(regexp), []);\n}\n\nexport default words;\n","import helpers from \"@nyxlang/helpers\";\nimport { REGEXP_PUNCTUATION } from \"../helpers/regexp.js\";\n\nconst { coerceToString } = helpers;\n\n/**\n * Strip punctuation marks from a string\n *\n * @function stripPunc\n * @static\n * @since 0.0.1\n * @memberof Strip\n * @param {string} subject String to strip punctuation from\n * @returns {string}\n * @example\n * su.stripPunc(\"I can't do it, captain!\")\n * // => \"I cant do it captain\"\n */\nexport default function stripPunc(subject) {\n  subject = coerceToString(subject);\n  return subject.replace(REGEXP_PUNCTUATION, \"\");\n}\n","import helpers from \"@nyxlang/helpers\";\nimport capitalize from \"./capitalize.js\";\nimport words from \"../split/words.js\";\nimport stripPunc from \"../strip/strippunc.js\";\n\nconst { coerceToString } = helpers;\n\n/**\n * Converts `subject` to {@link https://en.wikipedia.org/wiki/Camel_case camelCase}.\n * @function camelCase\n * @static\n * @since 0.0.1\n * @memberof Case\n * @param {string} subject The string to camelCase\n * @param {(string|string[])} [locale=en-US] The locale or locales to use for capitalization\n * @returns {string} the camelCased string with non-word characters stripped out\n * @throws {RangeError} if locale is not a valid language tag\n * @throws {TypeError} if an array element is not a string\n * @example\n * su.camelCase(\"bird flight\")\n * // => \"birdFlight\"\n * su.camelCase(\"this_is_a_string\")\n * // => \"thisIsAString\"\n * su.camelCase(\"   _-It is istanbul   not constantinople-_ \", \"TR\")\n * // => \"itİsİstanbulNotConstantinople\"\n */\nexport default function camelCase(subject, locale = \"en-US\") {\n  subject = coerceToString(subject);\n  const splitWords = words(subject);\n  return splitWords.reduce((str, word, i) => {\n    const cased =\n      i == 0\n        ? stripPunc(word.toLocaleLowerCase(locale))\n        : stripPunc(capitalize(word, { lower: true, locale }));\n    return str + cased;\n  }, \"\");\n}\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n/**\n * @function decapitalize\n * @static\n * @since 0.0.1\n * @memberof Case\n * @param {string} subject String to decapitalize\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.lower=false] Downcase the rest of the string if true\n * @param {boolean} [options.all=false] Decapitalize every word in the string if true\n * @param {(string|string[])} [options.locale=en-US] The locale or locales to use\n * @returns {string}\n * @throws {RangeError} if locale is not a valid language tag\n * @throws {TypeError} if an array element in the local param is not a string\n * @example\n * su.decapitalize(\"THis IS A String To DeCapitalize\")\n * // => \"tHis IS A String To DeCapitalize\"\n * su.decapitalize(\"THis IS A String To DeCapitalize\", { lower: true })\n * // => \"this is a string To decapitalize\"\n * su.decapitalize(\"THIS IS A STRING TO DECAPITALIZE\", { all: true })\n * // => \"tHIS iS a sTRING tO dECAPITALIZE\"\n * su.decapitalize(\"İstanbul\", { locale: \"TR\" })\n * // => \"istanbul\"\n */\nexport default function decapitalize(\n  subject,\n  { lower = false, all = false, locale = \"en-US\" } = {}\n) {\n  subject = coerceToString(subject);\n  let str = subject[0].toLocaleLowerCase(locale) + subject.slice(1);\n  if (lower) {\n    str = str[0] + str.slice(1).toLocaleLowerCase(locale);\n  }\n  if (all) {\n    const ws = str.split(\" \");\n    str = ws.reduce((s, w, i, a) => {\n      let st = w[0].toLocaleLowerCase(locale) + w.slice(1);\n      if (i < a.length - 1) {\n        st += \" \";\n      }\n      return s + st;\n    }, \"\");\n  }\n  return str;\n}\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n\n/**\n * Convert a string to lowercase based on locale information\n *\n * @function downcase\n * @static\n * @since 0.0.1\n * @memberof Case\n * @param {string} subject String to downcase\n * @param {string|string[]} locale Locale information or an array of locales\n * @throws {RangeError} if locale is not a valid language tag\n * @throws {TypeError} if an array element in the locale param is not a string\n * @example\n * su.downcase(\"This IS A StRiNg\")\n * // => \"this is a string\"\n * su.downcase(\"İSTANBUL\")\n * // => \"i̇stanbul\"\n */\nexport default function downcase(subject, locale = \"en-US\") {\n  subject = coerceToString(subject);\n  return subject.toLocaleLowerCase(locale);\n}\n","import helpers from \"@nyxlang/helpers\";\nimport words from \"../split/words.js\";\n\nconst { coerceToString } = helpers;\n\n/**\n * Convert a string to lowercase with hyphens between the words\n *\n * @param {string} subject The string to kebab case\n * @param {(string|string[])} [locale=en-US] The locale or locales to use\n * @returns {string}\n * @throws {RangeError} if locale is not a valid language tag\n * @throws {TypeError} if an array element in the locale param is not a string\n * @example\n * su.kebabCase(\"Convert this to kebab case\")\n * // => \"convert-this-to-kebab-case\"\n * su.kebabCase(\"convertThisToKebabCase\")\n * // => \"convert-this-to-kebab-case\"\n */\nexport default function kebabCase(subject, locale = \"en-US\") {\n  subject = coerceToString(subject);\n  const ws = words(subject);\n\n  return ws.reduce((str, word, i, a) => {\n    let s = word.toLocaleLowerCase(locale);\n    if (i < a.length - 1) {\n      s += \"-\";\n    }\n    return (str += s);\n  }, \"\");\n}\n","import helpers from \"@nyxlang/helpers\";\nimport words from \"../split/words.js\";\nimport capitalize from \"./capitalize.js\";\nimport stripPunc from \"../strip/strippunc.js\";\n\nconst { coerceToString } = helpers;\n\n/**\n * Convert a string to PascalCase\n *\n * @function pascalCase\n * @static\n * @since 0.0.1\n * @memberof Case\n * @param {string} subject The string to convert to PascalCase\n * @returns {string}\n * @example\n * su.pascalCase(\"this IS some TEXT\")\n * // => \"ThisIsSomeText\"\n */\nexport default function pascalCase(subject) {\n  subject = coerceToString(subject);\n  const ws = words(subject);\n  return ws.reduce(\n    (str, word) => (str += stripPunc(capitalize(word, { lower: true }))),\n    \"\"\n  );\n}\n","import helpers from \"@nyxlang/helpers\";\nimport words from \"../split/words.js\";\n\nconst { coerceToString } = helpers;\n\n/**\n * Convert a string to upper or lower snake_case\n *\n * @function snakeCase\n * @static\n * @since 0.0.1\n * @memberof Case\n * @param {string} subject The string to convert\n * @param {Object} param1 Options\n * @param {boolean} param1.upper If true, upcase the whole string\n * @param {string|string[]} A locale string or array of locales\n * @returns {string}\n * @throws {RangeError} if locale is not a valid language tag\n * @throws {TypeError} if an array element in the locale param is not a string\n * @example\n * su.snakeCase(\"This is a string\")\n * // => \"this_is_a_string\"\n * su.snakeCase(\"thisIsAString\", { upper: true })\n * // => \"THIS_IS_A_STRING\"\n */\nexport default function snakeCase(\n  subject,\n  { upper = false, locale = \"en-US\" } = {}\n) {\n  subject = coerceToString(subject);\n  const ws = words(subject);\n  let str = ws.reduce((st, word) => (st += `_${word}`));\n  if (upper) {\n    return str.toLocaleUpperCase(locale);\n  }\n  return str.toLocaleLowerCase(locale);\n}\n","/**\n * Decode an array of Unicode code points into a string\n *\n * @function decodeCodePoints\n * @static\n * @since 0.0.1\n * @memberof Encode\n * @param {number[]} data An array of Unicode code points\n * @returns {string}\n * @example\n * su.decodeCodePoints([0x0068, 0x0065, 0x006c, 0x006c, 0x006f])\n * // => \"hello\"\n * su.decodeCodePoints([0x1f601, 0x1f436, 0x1f355])\n * // => \"😁🐶🍕\"\n */\nexport default function decodeCodePoints(data) {\n  return data.reduce((str, point) => str + String.fromCodePoint(point), \"\");\n}\n","/**\n * Decodes an array of UTF-8 bytes. From {@link https://gist.github.com/joni/3760795#gistcomment-1299119}.\n *\n * @function decodeUTF8\n * @static\n * @since 0.0.1\n * @memberof Encode\n * @param {number[]} data Array of UTF-8 encoded bytes\n * @returns {string} Decoded string\n * @example\n * su.decodeUTF8([0x68, 0x65, 0x6c, 0x6c, 0x6f])\n * // => \"hello\"\n * su.decodeUTF8([0xf0, 0x9f, 0x98, 0x80, 0xf0, 0x9f, 0x98, 0x81])\n * // => \"😀😁\"\n */\nexport default function decodeUTF8(data) {\n  let str = \"\",\n    i;\n\n  for (i = 0; i < data.length; i++) {\n    let value = data[i];\n\n    if (value < 0x80) {\n      str += String.fromCharCode(value);\n    } else if (value > 0xbf && value < 0xe0) {\n      str += String.fromCharCode(((value & 0x1f) << 6) | (data[i + 1] & 0x3f));\n      i += 1;\n    } else if (value > 0xdf && value < 0xf0) {\n      str += String.fromCharCode(\n        ((value & 0x0f) << 12) |\n          ((data[i + 1] & 0x3f) << 6) |\n          (data[i + 2] & 0x3f)\n      );\n      i += 2;\n    } else {\n      // surrogate pair\n      var charCode =\n        (((value & 0x07) << 18) |\n          ((data[i + 1] & 0x3f) << 12) |\n          ((data[i + 2] & 0x3f) << 6) |\n          (data[i + 3] & 0x3f)) -\n        0x010000;\n\n      str += String.fromCharCode(\n        (charCode >> 10) | 0xd800,\n        (charCode & 0x03ff) | 0xdc00\n      );\n      i += 3;\n    }\n  }\n\n  return str;\n}\n","/**\n * Converts an array of UTF-16 char codes into a string\n *\n * @function decodeUTF16\n * @static\n * @since 0.0.1\n * @memberof Encode\n * @param {number[]} codes\n * @returns {string}\n * @example\n * su.decodeUTF16([0x0068, 0x0065, 0x006c, 0x006c, 0x006f])\n * // => \"hello\"\n * su.decodeUTF16([0xd83d, 0xde01, 0xd83d, 0xdc36, 0xd83c, 0xdf55])\n * // => \"😁🐶🍕\"\n */\nexport default function decodeUTF16(codes) {\n  return codes.reduce((str, code) => (str += String.fromCharCode(code)), \"\");\n}\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n\n/**\n * Split a string into an array of its numeric Unicode code points\n *\n * @function encodeCodePoints\n * @static\n * @since 0.0.1\n * @memberof Encode\n * @param {string} subject A string to encode\n * @returns {number[]}\n * @example\n * su.encodeCodePoints(\"hello\")\n * // => [0x0068, 0x0065, 0x006c, 0x006c, 0x006f]\n * su.encodeCodePoints(\"😁🐶🍕\")\n * // => [0x1f601, 0x1f436, 0x1f355]\n * su.encodeCodePoints(\"अनुच्छेद\")\n * // => [0x905, 0x928, 0x941, 0x91a, 0x94d, 0x91b, 0x947, 0x926]\n */\nexport default function encodeCodePoints(subject) {\n  subject = coerceToString(subject);\n  return [...subject].map((scalar) => scalar.codePointAt(0));\n}\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n\n/**\n * Encodes a string into an array of UTF-8 code unit values. From {@link https://stackoverflow.com/a/18729931}\n *\n * @function encodeUTF8\n * @static\n * @since 0.0.1\n * @memberof Encode\n * @param {string} subject String to encode\n * @returns {number[]} An array of UTF-8 byte values\n * @example\n * su.encodeUTF8(\"hello\")\n * // => [0x68, 0x65, 0x6c, 0x6c, 0x6f]\n * su.encodeUTF8(\"😀😁\")\n * // => [0xf0, 0x9f, 0x98, 0x80, 0xf0, 0x9f, 0x98, 0x81]\n */\nexport default function encodeUTF8(subject) {\n  subject = coerceToString(subject);\n  let utf8 = [];\n  for (var i = 0; i < subject.length; i++) {\n    let charcode = subject.charCodeAt(i);\n    if (charcode < 0x80) utf8.push(charcode);\n    else if (charcode < 0x800) {\n      utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      utf8.push(\n        0xe0 | (charcode >> 12),\n        0x80 | ((charcode >> 6) & 0x3f),\n        0x80 | (charcode & 0x3f)\n      );\n    }\n    // surrogate pair\n    else {\n      i++;\n      // UTF-16 encodes 0x10000-0x10FFFF by\n      // subtracting 0x10000 and splitting the\n      // 20 bits of 0x0-0xFFFFF into two halves\n      charcode =\n        0x10000 +\n        (((charcode & 0x3ff) << 10) | (subject.charCodeAt(i) & 0x3ff));\n      utf8.push(\n        0xf0 | (charcode >> 18),\n        0x80 | ((charcode >> 12) & 0x3f),\n        0x80 | ((charcode >> 6) & 0x3f),\n        0x80 | (charcode & 0x3f)\n      );\n    }\n  }\n  return utf8;\n}\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n\n/**\n * Split a string into an array of its UTF-16 char codes\n *\n * @function charCodes\n * @static\n * @since 0.0.1\n * @memberof Split\n * @param {string} subject The string to split\n * @returns {number[]} An array of numeric char codes\n * @example\n * su.charCodes(\"hello\")\n * // => [104, 101, 108, 108, 111];\n * su.charCodes(\"😁🐶🍕\")\n * // => [55357, 56833, 55357, 56374, 55356, 57173]\n */\nexport default function charCodes(subject) {\n  subject = coerceToString(subject);\n  return subject.split(\"\").map((char) => char.charCodeAt(0));\n}\n","/**\n * Joins an array of strings with optional separator\n *\n * @function join\n * @static\n * @since 0.0.1\n * @memberof Join\n * @param {string[]} strings An array of strings\n * @param {string} [sep=\"\"] Separator to insert between strings\n * @returns {string}\n * @example\n * su.join([\"h\", \"e\", \"l\", \"l\", \"o\"])\n * // => \"hello\"\n * su.join([\"😁\", \"🐶\", \"🍕\"], \"-\")\n * // => \"😁-🐶-🍕\"\n */\nexport default function join(strings, sep = \"\") {\n  return strings.join(sep);\n}\n","/**\n * Checks if an object is a string. From {@link https://github.com/panzerdp/voca/blob/master/src/query/is_string.js}\n *\n * @function isString\n * @static\n * @since 0.0.1\n * @memberof Query\n * @function isString\n * @param {*} value The value to check\n * @returns {boolean} `true` if string\n */\nexport default function isString(value) {\n  return (\n    typeof value == \"string\" ||\n    (typeof value == \"object\" && value instanceof String)\n  );\n}\n","/**\n * Forked from {@link https://github.com/xorgy/grapheme-iterator}\n * @ignore\n */\n// Generated by prep.js\nconst GraphemeBreakProperty = JSON.parse(\n  \"[[1,5,[1536,72324]],[1,0,[1757,1807,2274,3406,69821,69837,71999,72001,72250,73030]],[1,1,[70082]],[2,0,[13]],[3,0,[10]],[4,9,[0,8294]],[4,1,[11,8206]],[4,17,[14]],[4,32,[127]],[4,0,[173,1564,6158,8203,8232,8233,8293,65279,917504,917505]],[4,4,[8234,8288]],[4,8,[65520,78896]],[4,2,[65529]],[4,3,[113824]],[4,7,[119155]],[4,29,[917506]],[4,127,[917632]],[4,3599,[918000]],[5,111,[768]],[5,4,[1155,2089,2753,3968,6966,7675,66422,69927,70512,71463,92912,119150,121499,122918,127995]],[5,1,[1160,1473,1476,1767,2402,2530,2561,2625,2631,2672,2689,2759,2786,2901,2914,3157,3170,3276,3285,3298,3328,3387,3426,3864,3974,4153,4157,4184,4229,5970,6002,6068,6277,6439,6679,6847,7040,7080,7144,7222,7416,12334,12441,42654,42736,43045,43204,43452,43569,43573,43703,43710,43756,65438,68101,68325,69291,69817,70016,70198,70400,70459,70847,70850,71100,71103,71132,71231,71737,71995,72154,72344,72882,72885,73020,73104,73459,113821,122915]],[5,44,[1425]],[5,0,[1471,1479,1648,1809,2045,2362,2364,2381,2433,2492,2494,2509,2519,2558,2620,2641,2677,2748,2765,2817,2876,2878,2879,2893,2903,2946,3006,3008,3021,3031,3072,3076,3201,3260,3263,3266,3270,3390,3405,3415,3457,3530,3535,3542,3551,3633,3761,3893,3895,3897,4038,4226,4237,4253,6086,6109,6313,6450,6683,6742,6752,6754,6783,6846,6964,6965,6972,6978,7142,7149,7405,7412,8204,8417,11647,42607,43010,43014,43019,43052,43263,43443,43493,43587,43596,43644,43696,43713,43766,44005,44008,44013,64286,66045,66272,68159,69633,70003,70095,70196,70206,70367,70462,70464,70487,70726,70750,70832,70842,70845,71087,71229,71339,71341,71351,71984,71998,72003,72160,72263,72767,73018,73031,73109,73111,94031,94180,119141,121461,121476]],[5,10,[1552,1958,3981,6089,43335,69446]],[5,20,[1611]],[5,6,[1750,2385,3636,6071,6744,7394,70502,72752,72874,73023,92976,119173,122880,122907,123184,125136,125252]],[5,5,[1759,2810,3784,4146,43561,70835,71344,72243,72273,72760,73009]],[5,3,[1770,2070,2497,2881,3146,3393,4141,4209,6912,7074,8413,12330,43446,68108,68900,69811,70089,71090,71458,72148,72251,94095,119210,123628]],[5,26,[1840]],[5,8,[2027,2075,3764,7019,70070,71727]],[5,2,[2085,2137,2635,3134,3142,3538,4190,4957,5906,5938,6155,6432,6457,7083,7151,7376,8418,11503,42608,43392,43698,68097,68152,69759,69888,70191,70722,71453,72281,119143,119362]],[5,14,[2259,69688,121505]],[5,31,[2275,11744]],[5,7,[2369,3655,6757,7212,43302,69933,70371,70712,71219,119163]],[5,13,[3953,6832]],[5,35,[3993]],[5,9,[6771,42612,72193]],[5,12,[7380,8400,72330]],[5,57,[7616]],[5,11,[8421]],[5,17,[43232]],[5,15,[65024,65056]],[5,21,[72850]],[5,54,[121344]],[5,49,[121403]],[5,16,[122888]],[5,95,[917536]],[5,239,[917760]],[6,25,[127462]],[7,0,[2307,2363,2563,2691,2761,2880,3007,3262,3635,3763,3967,4145,4228,6070,6741,6743,6916,6971,7042,7073,7082,7143,7150,7393,7415,43047,43395,43597,43755,43765,44012,69632,69634,69762,69932,70018,70094,70197,70463,70725,70841,70846,70849,71102,71230,71340,71350,71462,71736,71997,72000,72002,72164,72249,72343,72751,72766,72873,72881,72884,73110,119142,119149]],[7,2,[2366,2622,2750,3014,3018,3073,3398,3402,6441,7146,43454,69808,70067,70188,70368,70475,70709,71216,71724,72145]],[7,3,[2377,3137,6435,70465,71096,72156]],[7,1,[2382,2434,2495,2503,2507,2763,2818,2887,2891,3009,3202,3264,3267,3271,3274,3330,3391,3458,3536,3570,3902,4155,4182,6087,6448,6681,6979,7078,7154,7220,43043,43136,43346,43444,43450,43567,43571,43758,44003,44006,44009,69815,69957,70079,70194,70402,70471,70498,70720,70833,70843,71088,71227,71342,71456,71991,72279,73107,73461,94192]],[7,6,[3544]],[7,7,[6078,7204]],[7,5,[6451,6765]],[7,4,[6973,71985,73098]],[7,15,[43188]],[7,54,[94033]],[8,95,[4352]],[8,28,[43360]],[9,71,[4448]],[9,22,[55216]],[10,87,[4520]],[10,48,[55243]],[11,0,[44032,44060,44088,44116,44144,44172,44200,44228,44256,44284,44312,44340,44368,44396,44424,44452,44480,44508,44536,44564,44592,44620,44648,44676,44704,44732,44760,44788,44816,44844,44872,44900,44928,44956,44984,45012,45040,45068,45096,45124,45152,45180,45208,45236,45264,45292,45320,45348,45376,45404,45432,45460,45488,45516,45544,45572,45600,45628,45656,45684,45712,45740,45768,45796,45824,45852,45880,45908,45936,45964,45992,46020,46048,46076,46104,46132,46160,46188,46216,46244,46272,46300,46328,46356,46384,46412,46440,46468,46496,46524,46552,46580,46608,46636,46664,46692,46720,46748,46776,46804,46832,46860,46888,46916,46944,46972,47000,47028,47056,47084,47112,47140,47168,47196,47224,47252,47280,47308,47336,47364,47392,47420,47448,47476,47504,47532,47560,47588,47616,47644,47672,47700,47728,47756,47784,47812,47840,47868,47896,47924,47952,47980,48008,48036,48064,48092,48120,48148,48176,48204,48232,48260,48288,48316,48344,48372,48400,48428,48456,48484,48512,48540,48568,48596,48624,48652,48680,48708,48736,48764,48792,48820,48848,48876,48904,48932,48960,48988,49016,49044,49072,49100,49128,49156,49184,49212,49240,49268,49296,49324,49352,49380,49408,49436,49464,49492,49520,49548,49576,49604,49632,49660,49688,49716,49744,49772,49800,49828,49856,49884,49912,49940,49968,49996,50024,50052,50080,50108,50136,50164,50192,50220,50248,50276,50304,50332,50360,50388,50416,50444,50472,50500,50528,50556,50584,50612,50640,50668,50696,50724,50752,50780,50808,50836,50864,50892,50920,50948,50976,51004,51032,51060,51088,51116,51144,51172,51200,51228,51256,51284,51312,51340,51368,51396,51424,51452,51480,51508,51536,51564,51592,51620,51648,51676,51704,51732,51760,51788,51816,51844,51872,51900,51928,51956,51984,52012,52040,52068,52096,52124,52152,52180,52208,52236,52264,52292,52320,52348,52376,52404,52432,52460,52488,52516,52544,52572,52600,52628,52656,52684,52712,52740,52768,52796,52824,52852,52880,52908,52936,52964,52992,53020,53048,53076,53104,53132,53160,53188,53216,53244,53272,53300,53328,53356,53384,53412,53440,53468,53496,53524,53552,53580,53608,53636,53664,53692,53720,53748,53776,53804,53832,53860,53888,53916,53944,53972,54000,54028,54056,54084,54112,54140,54168,54196,54224,54252,54280,54308,54336,54364,54392,54420,54448,54476,54504,54532,54560,54588,54616,54644,54672,54700,54728,54756,54784,54812,54840,54868,54896,54924,54952,54980,55008,55036,55064,55092,55120,55148,55176]],[12,26,[44033,44061,44089,44117,44145,44173,44201,44229,44257,44285,44313,44341,44369,44397,44425,44453,44481,44509,44537,44565,44593,44621,44649,44677,44705,44733,44761,44789,44817,44845,44873,44901,44929,44957,44985,45013,45041,45069,45097,45125,45153,45181,45209,45237,45265,45293,45321,45349,45377,45405,45433,45461,45489,45517,45545,45573,45601,45629,45657,45685,45713,45741,45769,45797,45825,45853,45881,45909,45937,45965,45993,46021,46049,46077,46105,46133,46161,46189,46217,46245,46273,46301,46329,46357,46385,46413,46441,46469,46497,46525,46553,46581,46609,46637,46665,46693,46721,46749,46777,46805,46833,46861,46889,46917,46945,46973,47001,47029,47057,47085,47113,47141,47169,47197,47225,47253,47281,47309,47337,47365,47393,47421,47449,47477,47505,47533,47561,47589,47617,47645,47673,47701,47729,47757,47785,47813,47841,47869,47897,47925,47953,47981,48009,48037,48065,48093,48121,48149,48177,48205,48233,48261,48289,48317,48345,48373,48401,48429,48457,48485,48513,48541,48569,48597,48625,48653,48681,48709,48737,48765,48793,48821,48849,48877,48905,48933,48961,48989,49017,49045,49073,49101,49129,49157,49185,49213,49241,49269,49297,49325,49353,49381,49409,49437,49465,49493,49521,49549,49577,49605,49633,49661,49689,49717,49745,49773,49801,49829,49857,49885,49913,49941,49969,49997,50025,50053,50081,50109,50137,50165,50193,50221,50249,50277,50305,50333,50361,50389,50417,50445,50473,50501,50529,50557,50585,50613,50641,50669,50697,50725,50753,50781,50809,50837,50865,50893,50921,50949,50977,51005,51033,51061,51089,51117,51145,51173,51201,51229,51257,51285,51313,51341,51369,51397,51425,51453,51481,51509,51537,51565,51593,51621,51649,51677,51705,51733,51761,51789,51817,51845,51873,51901,51929,51957,51985,52013,52041,52069,52097,52125,52153,52181,52209,52237,52265,52293,52321,52349,52377,52405,52433,52461,52489,52517,52545,52573,52601,52629,52657,52685,52713,52741,52769,52797,52825,52853,52881,52909,52937,52965,52993,53021,53049,53077,53105,53133,53161,53189,53217,53245,53273,53301,53329,53357,53385,53413,53441,53469,53497,53525,53553,53581,53609,53637,53665,53693,53721,53749,53777,53805,53833,53861,53889,53917,53945,53973,54001,54029,54057,54085,54113,54141,54169,54197,54225,54253,54281,54309,54337,54365,54393,54421,54449,54477,54505,54533,54561,54589,54617,54645,54673,54701,54729,54757,54785,54813,54841,54869,54897,54925,54953,54981,55009,55037,55065,55093,55121,55149,55177]],[13,0,[8205]]]\"\n);\nconst lut = new Uint8Array(460800);\n\nfor (const [p, s, bs] of GraphemeBreakProperty)\n  for (const b of bs)\n    for (let c = b; c <= b + s; c++) lut[c >> 1] |= c & 1 ? p << 4 : p;\n\nconst classify = (c) => {\n  const v = lut[c >> 1];\n  if (!v) return 0;\n  else if (c & 1) return v >> 4;\n  else return v & 0xf;\n};\n\nconst Any = 0,\n  Prepend = 1,\n  CR = 2,\n  LF = 3,\n  Control = 4,\n  Extend = 5,\n  Regional = 6,\n  SpacingMark = 7,\n  L = 8,\n  V = 9,\n  T = 10,\n  LV = 11,\n  LVT = 12,\n  ZWJ = 13;\n\nconst grapheme_iterator = (s) => ({\n  *[Symbol.iterator]() {\n    let pp = -1; // GB1\n    let egc = \"\";\n    let regionalstack = 0;\n    for (const cs of s) {\n      const cc = cs.codePointAt(0);\n      const cp = classify(cc);\n\n      if (cp === Extend || cp === ZWJ || cp == SpacingMark /* GB9a */)\n        egc += cs;\n      // GB9\n      else\n        switch (pp) {\n          case ZWJ:\n          case Prepend: // GB9b\n          case -1: // GB1\n            egc += cs;\n            break;\n          case Extend:\n            if (cp === Extend) egc += cs;\n            else {\n              yield egc;\n              egc = cs;\n            }\n            break;\n          case CR:\n            if (cp === LF) egc += cs;\n            // GB3\n            else {\n              yield egc;\n              egc = cs; // GB4\n            }\n            break;\n          case L: // GB6\n            if (cp === L || cp === V || cp === LV || cp === LVT) egc += cs;\n            else {\n              yield egc;\n              egc = cs;\n            }\n            break;\n          case LV:\n          case V: // GB7\n            if (cp === V || cp === T) egc += cs;\n            else {\n              yield egc;\n              egc = cs;\n            }\n            break;\n          case LVT:\n          case T: // GB8\n            if (cp === T) egc += cs;\n            else {\n              yield egc;\n              egc = cs;\n            }\n            break;\n          case Regional: // GB12\n            if (regionalstack % 2) {\n              // GB13\n              egc += cs;\n              break;\n            }\n          //        case Any: // GB999\n          //        case Control: // GB4\n          //        case LF: // GB4\n          default:\n            yield egc;\n            egc = cs;\n        }\n      regionalstack = cp === Regional ? regionalstack + 1 : 0;\n      pp = cp;\n    }\n    if (egc !== \"\") yield egc; // GB2\n  },\n});\n\nexport default grapheme_iterator;\n","import helpers from \"@nyxlang/helpers\";\nimport grapheme_iterator from \"../lib/grapheme_iterator.js\";\n\nconst { coerceToString } = helpers;\n\n/**\n * Splits a string into an array of Unicode extended grapheme clusters.\n * These more closely correspond to what the reader perceives as\n * characters in cases where code points are not sufficient.\n *\n * @function graphemes\n * @static\n * @since 0.0.1\n * @memberof Split\n * @param {string} subject String to split into graphemes\n * @returns {string[]} An array of graphemes\n * @example\n * su.graphemes(\"hello\")\n * // => [\"h\", \"e\", \"l\", \"l\", \"o\"]\n * su.graphemes(\"अनुच्छेद\")\n * // => ['अ', 'नु', 'च्', 'छे', 'द']\n */\nexport default function graphemes(subject) {\n  subject = coerceToString(subject);\n  return [...grapheme_iterator(subject)];\n}\n","import helpers from \"@nyxlang/helpers\";\nconst { coerceToString } = helpers;\n\n/**\n * Splits a string into an array of its Unicode scalar values, each\n * of which is represented by a single Unicode code point. Many\n * or even most JavaScript writers call this a \"character.\"\n *\n * @function scalars\n * @static\n * @since 0.01\n * @memberof Split\n * @param {string} subject String to split\n * @returns {string[]} An array of Unicode scalars\n * @example\n * su.scalars(\"hello\")\n * // => [\"h\", \"e\", \"l\", \"l\", \"o\"]\n * su.scalars(\"😁🐶🍕\")\n * // => [\"😁\", \"🐶\", \"🍕\"]\n */\nexport default function scalars(subject) {\n  subject = coerceToString(subject);\n  return [...subject];\n}\n","/**\n * Functions to change string casing\n * @namespace Case\n */\nimport camelCase from \"./case/camelcase.js\";\nimport capitalize from \"./case/capitalize.js\";\nimport decapitalize from \"./case/decapitalize.js\";\nimport downcase from \"./case/downcase.js\";\nimport kebabCase from \"./case/kebabcase.js\";\nimport pascalCase from \"./case/pascalcase.js\";\nimport snakeCase from \"./case/snakecase.js\";\n\n/**\n * Functions to encode and decode strings\n * @namespace Encode\n */\nimport decodeCodePoints from \"./encode/decodecodepoints.js\";\nimport decodeUTF8 from \"./encode/decodeutf8.js\";\nimport decodeUTF16 from \"./encode/decodeutf16.js\";\nimport encodeCodePoints from \"./encode/encodecodepoints.js\";\nimport encodeUTF8 from \"./encode/encodeutf8.js\";\nimport encodeUTF16 from \"./encode/encodeutf16.js\";\n\n/**\n * Functions to join strings\n * @namespace Join\n */\nimport join from \"./join/join.js\";\n\n/**\n * Functions to query strings\n * @namespace Query\n */\nimport isString from \"./query/isstring.js\";\n\n/**\n * Functions to split a string\n * @namespace Split\n */\nimport graphemes from \"./split/graphemes.js\";\nimport scalars from \"./split/scalars.js\";\nimport words from \"./split/words.js\";\n\n/**\n * Functions to strip characters from a string\n */\nimport stripPunc from \"./strip/strippunc.js\";\n\n// Can't use object property shorthand because\n// then JSDoc names functions incorrectly\nexport default {\n  // Case\n  camelCase: camelCase,\n  capitalize: capitalize,\n  decapitalize: decapitalize,\n  downcase: downcase,\n  kebabCase: kebabCase,\n  pascalCase: pascalCase,\n  snakeCase: snakeCase,\n\n  // Encode\n  decodeCodePoints: decodeCodePoints,\n  decodeUTF8: decodeUTF8,\n  decodeUTF16: decodeUTF16,\n  encodeCodePoints: encodeCodePoints,\n  encodeUTF8: encodeUTF8,\n  encodeUTF16: encodeUTF16,\n\n  // Join\n  join: join,\n\n  // Query\n  isString: isString,\n\n  // Split\n  graphemes: graphemes,\n  scalars: scalars,\n  words: words,\n\n  // Strip\n  stripPunc: stripPunc,\n};\n","import su from \"./functions.js\";\n\nexport { su };\n"]}